import os
import globalVars as gv
import datetime
import shutil


def marlin():
        date = datetime.date.today().strftime("%m_%d_%Y")
        printerDir = gv.printerDir+"Printer_"+date+"\\"

        if os.path.isdir(printerDir+'\\Marlin\\'):
            shutil.rmtree(printerDir+'\\Marlin\\')
        os.mkdir(printerDir+'Marlin\\')

        g = open(printerDir+'Marlin\\configuration.h','a')

        baudrate = "250000"
        maxTemp = str(230)
        bedMaxTemp = str(120)
        extruderTempSensor = str(1)
        bedTempSensor = str(1)
        xHomeDir = str(-1)
        yHomeDir = str(-1)
        zHomeDir = str(-1)
        maxTolerance = 20 #mm
        invertXDirection = False
        invertYDirection = False
        invertZDirection = False
        invertEDirection = False

        if(invertEDirection==False):
            invertEDirection = "false"
        else:
            invertEDirection = "true"

        if(invertXDirection==False):
            invertXDirection = "false"
        else:
            invertXDirection = "true"

        if(invertYDirection==False):
            invertYDirection = "false"
        else:
            invertYDirection = "true"

        if(invertZDirection==False):
            invertZDirection = "false"
        else:
            invertZDirection = "true"


        ##TEST##

        gv.printableWidth = 300
        gv.printableLength = 300
        gv.printableHeight = 300



        g.write('#ifndef CONFIGURATION_H\n')
        g.write('#define CONFIGURATION_H\n')
        g.write('\n')
        g.write('#include "boards.h"\n')
        g.write('\n')
        g.write('// This configuration file contains the basic settings.\n')
        g.write('// Advanced settings can be found in Configuration_adv.h\n')
        g.write('// BASIC SETTINGS: select your board type, temperature sensor type, axis scaling, and endstop configuration\n')
        g.write('\n')
        g.write('//===========================================================================\n')
        g.write('//============================= DELTA Printer ===============================\n')
        g.write('//===========================================================================\n')
        g.write('// For a Delta printer replace the configuration files with the files in the\n')
        g.write('// example_configurations/delta directory.\n')
        g.write('//\n')
        g.write('\n')
        g.write('//===========================================================================\n')
        g.write('//============================= SCARA Printer ===============================\n')
        g.write('//===========================================================================\n')
        g.write('// For a Delta printer replace the configuration files with the files in the\n')
        g.write('// example_configurations/SCARA directory.\n')
        g.write('//\n')
        g.write('\n')
        g.write('// User-specified version info of this build to display in [Pronterface, etc] terminal window during\n')
        g.write('// startup. Implementation of an idea by Prof Braino to inform user that any changes made to this\n')
        g.write('// build by the user have been successfully uploaded into firmware.\n')
        g.write('\n')
        g.write('//#define STRING_VERSION "1.0.2"\n')
        g.write('\n')
        g.write('#define STRING_VERSION_CONFIG_H __DATE__ " " __TIME__ // build date and time\n')
        g.write('#define STRING_CONFIG_H_AUTHOR "(none, default config)" // Who made the changes.\n')
        g.write('\n')
        g.write('// SERIAL_PORT selects which serial port should be used for communication with the host.\n')
        g.write('// This allows the connection of wireless adapters (for instance) to non-default port pins.\n')
        g.write('// Serial port 0 is still used by the Arduino bootloader regardless of this setting.\n')
        g.write('#define SERIAL_PORT 0\n')
        g.write('\n')
        g.write('// This determines the communication speed of the printer\n')
        g.write('#define BAUDRATE '+baudrate+'\n')
        g.write('\n')
        g.write('// This enables the serial port associated to the Bluetooth interface\n')
        g.write('//#define BTENABLED              // Enable BT interface on AT90USB devices\n')
        g.write('\n')
        g.write('// The following define selects which electronics board you have.\n')
        g.write('// Please choose the name from boards.h that matches your setup\n')
        g.write('#ifndef MOTHERBOARD\n')
        g.write('  #define MOTHERBOARD 33\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// Define this to set a custom name for your generic Mendel,\n')
        g.write('// #define CUSTOM_MENDEL_NAME "This Mendel"\n')
        g.write('\n')
        g.write('// Define this to set a unique identifier for this printer, (Used by some programs to differentiate between machines)\n')
        g.write('// You can use an online service to generate a random UUID. (eg http://www.uuidgenerator.net/version4)\n')
        g.write('// #define MACHINE_UUID "00000000-0000-0000-0000-000000000000"\n')
        g.write('\n')
        g.write('// This defines the number of extruders\n')
        g.write('#define EXTRUDERS 1\n')
        g.write('\n')
        g.write('//// The following define selects which power supply you have. Please choose the one that matches your setup\n')
        g.write('// 1 = ATX\n')
        g.write('// 2 = X-Box 360 203Watts (the blue wire connected to PS_ON and the red wire to VCC)\n')
        g.write('\n')
        g.write('#define POWER_SUPPLY 1\n')
        g.write('\n')
        g.write('// Define this to have the electronics keep the power supply off on startup. If you don\'t know what this is leave it.\n')
        g.write('// #define PS_DEFAULT_OFF\n')
        g.write('\n')
        g.write('//===========================================================================\n')
        g.write('//=============================Thermal Settings  ============================\n')
        g.write('//===========================================================================\n')
        g.write('//\n')
        g.write('//--NORMAL IS 4.7kohm PULLUP!-- 1kohm pullup can be used on hotend sensor, using correct resistor and table\n')
        g.write('//\n')
        g.write('//// Temperature sensor settings:\n')
        g.write('// -2 is thermocouple with MAX6675 (only for sensor 0)\n')
        g.write('// -1 is thermocouple with AD595\n')
        g.write('// 0 is not used\n')
        g.write('// 1 is 100k thermistor - best choice for EPCOS 100k (4.7k pullup)\n')
        g.write('// 2 is 200k thermistor - ATC Semitec 204GT-2 (4.7k pullup)\n')
        g.write('// 3 is Mendel-parts thermistor (4.7k pullup)\n')
        g.write('// 4 is 10k thermistor !! do not use it for a hotend. It gives bad resolution at high temp. !!\n')
        g.write('// 5 is 100K thermistor - ATC Semitec 104GT-2 (Used in ParCan & J-Head) (4.7k pullup)\n')
        g.write('// 6 is 100k EPCOS - Not as accurate as table 1 (created using a fluke thermocouple) (4.7k pullup)\n')
        g.write('// 7 is 100k Honeywell thermistor 135-104LAG-J01 (4.7k pullup)\n')
        g.write('// 71 is 100k Honeywell thermistor 135-104LAF-J01 (4.7k pullup)\n')
        g.write('// 8 is 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup)\n')
        g.write('// 9 is 100k GE Sensing AL03006-58.2K-97-G1 (4.7k pullup)\n')
        g.write('// 10 is 100k RS thermistor 198-961 (4.7k pullup)\n')
        g.write('// 11 is 100k beta 3950 1% thermistor (4.7k pullup)\n')
        g.write('// 12 is 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup) (calibrated for Makibox hot bed)\n')
        g.write('// 13 is 100k Hisens 3950  1% up to 300C for hotend "Simple ONE " & "Hotend "All In ONE"\n')
        g.write('// 20 is the PT100 circuit found in the Ultimainboard V2.x\n')
        g.write('// 60 is 100k Maker\'s Tool Works Kapton Bed Thermistor beta=3950\n')
        g.write('//\n')
        g.write('//    1k ohm pullup tables - This is not normal, you would have to have changed out your 4.7k for 1k\n')
        g.write('//                          (but gives greater accuracy and more stable PID)\n')
        g.write('// 51 is 100k thermistor - EPCOS (1k pullup)\n')
        g.write('// 52 is 200k thermistor - ATC Semitec 204GT-2 (1k pullup)\n')
        g.write('// 55 is 100k thermistor - ATC Semitec 104GT-2 (Used in ParCan & J-Head) (1k pullup)\n')
        g.write('//\n')
        g.write('// 1047 is Pt1000 with 4k7 pullup\n')
        g.write('// 1010 is Pt1000 with 1k pullup (non standard)\n')
        g.write('// 147 is Pt100 with 4k7 pullup\n')
        g.write('// 110 is Pt100 with 1k pullup (non standard)\n')
        g.write('\n')
        g.write('#define TEMP_SENSOR_0 '+extruderTempSensor+'\n')
        g.write('#define TEMP_SENSOR_1 -1\n')
        g.write('#define TEMP_SENSOR_2 0\n')
        g.write('#define TEMP_SENSOR_BED '+bedTempSensor+'\n')
        g.write('\n')
        g.write('// This makes temp sensor 1 a redundant sensor for sensor 0. If the temperatures difference between these sensors is to high the print will be aborted.\n')
        g.write('//#define TEMP_SENSOR_1_AS_REDUNDANT\n')
        g.write('#define MAX_REDUNDANT_TEMP_SENSOR_DIFF 10\n')
        g.write('\n')
        g.write('// Actual temperature must be close to target for this long before M109 returns success\n')
        g.write('#define TEMP_RESIDENCY_TIME 10  // (seconds)\n')
        g.write('#define TEMP_HYSTERESIS 3       // (degC) range of +/- temperatures considered "close" to the target one\n')
        g.write('#define TEMP_WINDOW     1       // (degC) Window around target to start the residency timer x degC early.\n')
        g.write('\n')
        g.write('// The minimal temperature defines the temperature below which the heater will not be enabled It is used\n')
        g.write('// to check that the wiring to the thermistor is not broken.\n')
        g.write('// Otherwise this would lead to the heater being powered on all the time.\n')
        g.write('#define HEATER_0_MINTEMP 5\n')
        g.write('#define HEATER_1_MINTEMP 5\n')
        g.write('#define HEATER_2_MINTEMP 5\n')
        g.write('#define BED_MINTEMP 5\n')
        g.write('\n')
        g.write('// When temperature exceeds max temp, your heater will be switched ofg.\n')
        g.write('// This feature exists to protect your hotend from overheating accidentally, but *NOT* from thermistor short/failure!\n')
        g.write('// You should use MINTEMP for thermistor short/failure protection.\n')
        g.write('#define HEATER_0_MAXTEMP '+maxTemp+'\n')
        g.write('#define HEATER_1_MAXTEMP '+maxTemp+'\n')
        g.write('#define HEATER_2_MAXTEMP '+maxTemp+'\n')
        g.write('#define BED_MAXTEMP '+bedMaxTemp+'\n')
        g.write('\n')
        g.write('// If your bed has low resistance e.g. .6 ohm and throws the fuse you can duty cycle it to reduce the\n')
        g.write('// average current. The value should be an integer and the heat bed will be turned on for 1 interval of\n')
        g.write('// HEATER_BED_DUTY_CYCLE_DIVIDER intervals.\n')
        g.write('//#define HEATER_BED_DUTY_CYCLE_DIVIDER 4\n')
        g.write('\n')
        g.write('// If you want the M105 heater power reported in watts, define the BED_WATTS, and (shared for all extruders) EXTRUDER_WATTS\n')
        g.write('//#define EXTRUDER_WATTS (12.0*12.0/6.7) //  P=I^2/R\n')
        g.write('//#define BED_WATTS (12.0*12.0/1.1)      // P=I^2/R\n')
        g.write('\n')
        g.write('// PID settings:\n')
        g.write('// Comment the following line to disable PID and enable bang-bang.\n')
        g.write('#define PIDTEMP\n')
        g.write('#define BANG_MAX 255 // limits current to nozzle while in bang-bang mode; 255=full current\n')
        g.write('#define PID_MAX BANG_MAX // limits current to nozzle while PID is active (see PID_FUNCTIONAL_RANGE below); 255=full current\n')
        g.write('#ifdef PIDTEMP\n')
        g.write('  //#define PID_DEBUG // Sends debug data to the serial port.\n')
        g.write('  //#define PID_OPENLOOP 1 // Puts PID in open loop. M104/M140 sets the output power from 0 to PID_MAX\n')
        g.write('  //#define SLOW_PWM_HEATERS // PWM with very low frequency (roughly 0.125Hz=8s) and minimum state time of approximately 1s useful for heaters driven by a relay\n')
        g.write('  #define PID_FUNCTIONAL_RANGE 10 // If the temperature difference between the target temperature and the actual temperature\n')
        g.write('                                  // is more then PID_FUNCTIONAL_RANGE then the PID will be shut off and the heater will be set to min/max.\n')
        g.write('  #define PID_INTEGRAL_DRIVE_MAX PID_MAX  //limit for the integral term\n')
        g.write('  #define K1 0.95 //smoothing factor within the PID\n')
        g.write('  #define PID_dT ((OVERSAMPLENR * 10.0)/(F_CPU / 64.0 / 256.0)) //sampling period of the temperature routine\n')
        g.write('\n')
        g.write('// If you are using a pre-configured hotend then you can use one of the value sets by uncommenting it\n')
        g.write('// Ultimaker\n')
        g.write('    #define  DEFAULT_Kp 22.2\n')
        g.write('    #define  DEFAULT_Ki 1.08\n')
        g.write('    #define  DEFAULT_Kd 114\n')
        g.write('\n')
        g.write('// MakerGear\n')
        g.write('//    #define  DEFAULT_Kp 7.0\n')
        g.write('//    #define  DEFAULT_Ki 0.1\n')
        g.write('//    #define  DEFAULT_Kd 12\n')
        g.write('\n')
        g.write('// Mendel Parts V9 on 12V\n')
        g.write('//    #define  DEFAULT_Kp 63.0\n')
        g.write('//    #define  DEFAULT_Ki 2.25\n')
        g.write('//    #define  DEFAULT_Kd 440\n')
        g.write('#endif // PIDTEMP\n')
        g.write('\n')
        g.write('// Bed Temperature Control\n')
        g.write('// Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n')
        g.write('//\n')
        g.write('// Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n')
        g.write('// If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n')
        g.write('// which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n')
        g.write('// This also works fine on a Fotek SSR-10DA Solid State Relay into a 250W heater.\n')
        g.write('// If your configuration is significantly different than this and you don\'t understand the issues involved, you probably\n')
        g.write('// shouldn\'t use bed PID until someone else verifies your hardware works.\n')
        g.write('// If this is enabled, find your own PID constants below.\n')
        g.write('//#define PIDTEMPBED\n')
        g.write('//\n')
        g.write('//#define BED_LIMIT_SWITCHING\n')
        g.write('\n')
        g.write('// This sets the max power delivered to the bed, and replaces the HEATER_BED_DUTY_CYCLE_DIVIDER option.\n')
        g.write('// all forms of bed control obey this (PID, bang-bang, bang-bang with hysteresis)\n')
        g.write('// setting this to anything other than 255 enables a form of PWM to the bed just like HEATER_BED_DUTY_CYCLE_DIVIDER did,\n')
        g.write('// so you shouldn\'t use it unless you are OK with PWM on your bed.  (see the comment on enabling PIDTEMPBED)\n')
        g.write('#define MAX_BED_POWER 255 // limits duty cycle to bed; 255=full current\n')
        g.write('\n')
        g.write('#ifdef PIDTEMPBED\n')
        g.write('//120v 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)\n')
        g.write('//from FOPDT model - kp=.39 Tp=405 Tdead=66, Tc set to 79.2, aggressive factor of .15 (vs .1, 1, 10)\n')
        g.write('    #define  DEFAULT_bedKp 10.00\n')
        g.write('    #define  DEFAULT_bedKi .023\n')
        g.write('    #define  DEFAULT_bedKd 305.4\n')
        g.write('\n')
        g.write('//120v 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)\n')
        g.write('//from pidautotune\n')
        g.write('//    #define  DEFAULT_bedKp 97.1\n')
        g.write('//    #define  DEFAULT_bedKi 1.41\n')
        g.write('//    #define  DEFAULT_bedKd 1675.16\n')
        g.write('\n')
        g.write('// FIND YOUR OWN: "M303 E-1 C8 S90" to run autotune on the bed at 90 degreesC for 8 cycles.\n')
        g.write('#endif // PIDTEMPBED\n')
        g.write('\n')
        g.write('\n')
        g.write('\n')
        g.write('//this prevents dangerous Extruder moves, i.e. if the temperature is under the limit\n')
        g.write('//can be software-disabled for whatever purposes by\n')
        g.write('#define PREVENT_DANGEROUS_EXTRUDE\n')
        g.write('//if PREVENT_DANGEROUS_EXTRUDE is on, you can still disable (uncomment) very long bits of extrusion separately.\n')
        g.write('#define PREVENT_LENGTHY_EXTRUDE\n')
        g.write('\n')
        g.write('#define EXTRUDE_MINTEMP 170\n')
        g.write('#define EXTRUDE_MAXLENGTH (X_MAX_LENGTH+Y_MAX_LENGTH) //prevent extrusion of very large distances.\n')
        g.write('\n')
        g.write('/*================== Thermal Runaway Protection ==============================\n')
        g.write('This is a feature to protect your printer from burn up in flames if it has\n')
        g.write('a thermistor coming off place (this happened to a friend of mine recently and\n')
        g.write('motivated me writing this feature).\n')
        g.write('\n')
        g.write('The issue: If a thermistor come off, it will read a lower temperature than actual.\n')
        g.write('The system will turn the heater on forever, burning up the filament and anything\n')
        g.write('else around.\n')
        g.write('\n')
        g.write('After the temperature reaches the target for the first time, this feature will\n')
        g.write('start measuring for how long the current temperature stays below the target\n')
        g.write('minus _HYSTERESIS (set_temperature - THERMAL_RUNAWAY_PROTECTION_HYSTERESIS).\n')
        g.write('\n')
        g.write('If it stays longer than _PERIOD, it means the thermistor temperature\n')
        g.write('cannot catch up with the target, so something *may be* wrong. Then, to be on the\n')
        g.write('safe side, the system will he halt.\n')
        g.write('\n')
        g.write('Bear in mind the count down will just start AFTER the first time the\n')
        g.write('thermistor temperature is over the target, so you will have no problem if\n')
        g.write('your extruder heater takes 2 minutes to hit the target on heating.\n')
        g.write('\n')
        g.write('*/\n')
        g.write('// If you want to enable this feature for all your extruder heaters,\n')
        g.write('// uncomment the 2 defines below:\n')
        g.write('\n')
        g.write('// Parameters for all extruder heaters\n')
        g.write('//#define THERMAL_RUNAWAY_PROTECTION_PERIOD 40 //in seconds\n')
        g.write('//#define THERMAL_RUNAWAY_PROTECTION_HYSTERESIS 4 // in degree Celsius\n')
        g.write('\n')
        g.write('// If you want to enable this feature for your bed heater,\n')
        g.write('// uncomment the 2 defines below:\n')
        g.write('\n')
        g.write('// Parameters for the bed heater\n')
        g.write('//#define THERMAL_RUNAWAY_PROTECTION_BED_PERIOD 20 //in seconds\n')
        g.write('//#define THERMAL_RUNAWAY_PROTECTION_BED_HYSTERESIS 2 // in degree Celsius\n')
        g.write('//===========================================================================\n')
        g.write('\n')
        g.write('\n')
        g.write('//===========================================================================\n')
        g.write('//=============================Mechanical Settings===========================\n')
        g.write('//===========================================================================\n')
        g.write('\n')
        g.write('// Uncomment the following line to enable CoreXY kinematics\n')
        g.write('// #define COREXY\n')
        g.write('\n')
        g.write('// coarse Endstop Settings\n')
        g.write('#define ENDSTOPPULLUPS // Comment this out (using // at the start of the line) to disable the endstop pullup resistors\n')
        g.write('\n')
        g.write('#ifndef ENDSTOPPULLUPS\n')
        g.write('  // fine endstop settings: Individual pullups. will be ignored if ENDSTOPPULLUPS is defined\n')
        g.write('  // #define ENDSTOPPULLUP_XMAX\n')
        g.write('  // #define ENDSTOPPULLUP_YMAX\n')
        g.write('  // #define ENDSTOPPULLUP_ZMAX\n')
        g.write('  // #define ENDSTOPPULLUP_XMIN\n')
        g.write('  // #define ENDSTOPPULLUP_YMIN\n')
        g.write('  // #define ENDSTOPPULLUP_ZMIN\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('#ifdef ENDSTOPPULLUPS\n')
        g.write('  #define ENDSTOPPULLUP_XMAX\n')
        g.write('  #define ENDSTOPPULLUP_YMAX\n')
        g.write('  #define ENDSTOPPULLUP_ZMAX\n')
        g.write('  #define ENDSTOPPULLUP_XMIN\n')
        g.write('  #define ENDSTOPPULLUP_YMIN\n')
        g.write('  #define ENDSTOPPULLUP_ZMIN\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// The pullups are needed if you directly connect a mechanical endswitch between the signal and ground pins.\n')
        g.write('const bool X_MIN_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n')
        g.write('const bool Y_MIN_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n')
        g.write('const bool Z_MIN_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n')
        g.write('const bool X_MAX_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n')
        g.write('const bool Y_MAX_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n')
        g.write('const bool Z_MAX_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n')
        g.write('//#define DISABLE_MAX_ENDSTOPS\n')
        g.write('//#define DISABLE_MIN_ENDSTOPS\n')
        g.write('\n')
        g.write('// Disable max endstops for compatibility with endstop checking routine\n')
        g.write('#if defined(COREXY) && !defined(DISABLE_MAX_ENDSTOPS)\n')
        g.write('  #define DISABLE_MAX_ENDSTOPS\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// For Inverting Stepper Enable Pins (Active Low) use 0, Non Inverting (Active High) use 1\n')
        g.write('#define X_ENABLE_ON 0\n')
        g.write('#define Y_ENABLE_ON 0\n')
        g.write('#define Z_ENABLE_ON 0\n')
        g.write('#define E_ENABLE_ON 0 // For all extruders\n')
        g.write('\n')
        g.write('// Disables axis when it\'s not being used.\n')
        g.write('#define DISABLE_X false\n')
        g.write('#define DISABLE_Y false\n')
        g.write('#define DISABLE_Z false\n')
        g.write('#define DISABLE_E false // For all extruders\n')
        g.write('#define DISABLE_INACTIVE_EXTRUDER true //disable only inactive extruders and keep active extruder enabled\n')
        g.write('\n')
        g.write('#define INVERT_X_DIR '+invertXDirection+'    // for Mendel set to false, for Orca set to true\n')
        g.write('#define INVERT_Y_DIR '+invertYDirection+'    // for Mendel set to true, for Orca set to false\n')
        g.write('#define INVERT_Z_DIR '+invertZDirection+'     // for Mendel set to false, for Orca set to true\n')
        g.write('#define INVERT_E0_DIR '+invertEDirection+'   // for direct drive extruder v9 set to true, for geared extruder set to false\n')
        g.write('#define INVERT_E1_DIR false    // for direct drive extruder v9 set to true, for geared extruder set to false\n')
        g.write('#define INVERT_E2_DIR false   // for direct drive extruder v9 set to true, for geared extruder set to false\n')
        g.write('\n')
        g.write('// ENDSTOP SETTINGS:\n')
        g.write('// Sets direction of endstops when homing; 1=MAX, -1=MIN\n')
        g.write('#define X_HOME_DIR '+xHomeDir+'\n')
        g.write('#define Y_HOME_DIR '+yHomeDir+'\n')
        g.write('#define Z_HOME_DIR '+zHomeDir+'\n')
        g.write('\n')
        g.write('#define min_software_endstops true // If true, axis won\'t move to coordinates less than HOME_POS.\n')
        g.write('#define max_software_endstops true  // If true, axis won\'t move to coordinates greater than the defined lengths below.\n')
        g.write('\n')
        g.write('// Travel limits after homing\n')
        g.write('#define X_MAX_POS '+str(gv.printableWidth-maxTolerance)+'\n')
        g.write('#define X_MIN_POS 0\n')
        g.write('#define Y_MAX_POS '+str(gv.printableLength-maxTolerance)+'\n')
        g.write('#define Y_MIN_POS 0\n')
        g.write('#define Z_MAX_POS '+str(gv.printableHeight-maxTolerance)+'\n')
        g.write('#define Z_MIN_POS 0\n')
        g.write('\n')
        g.write('#define X_MAX_LENGTH (X_MAX_POS - X_MIN_POS)\n')
        g.write('#define Y_MAX_LENGTH (Y_MAX_POS - Y_MIN_POS)\n')
        g.write('#define Z_MAX_LENGTH (Z_MAX_POS - Z_MIN_POS)\n')
        g.write('//============================= Bed Auto Leveling ===========================\n')
        g.write('\n')
        g.write('//#define ENABLE_AUTO_BED_LEVELING // Delete the comment to enable (remove // at the start of the line)\n')
        g.write('#define Z_PROBE_REPEATABILITY_TEST  // If not commented out, Z-Probe Repeatability test will be included if Auto Bed Leveling is Enabled.\n')
        g.write('\n')
        g.write('#ifdef ENABLE_AUTO_BED_LEVELING\n')
        g.write('\n')
        g.write('// There are 2 different ways to pick the X and Y locations to probe:\n')
        g.write('\n')
        g.write('//  - "grid" mode\n')
        g.write('//    Probe every point in a rectangular grid\n')
        g.write('//    You must specify the rectangle, and the density of sample points\n')
        g.write('//    This mode is preferred because there are more measurements.\n')
        g.write('//    It used to be called ACCURATE_BED_LEVELING but "grid" is more descriptive\n')
        g.write('\n')
        g.write('//  - "3-point" mode\n')
        g.write('//    Probe 3 arbitrary points on the bed (that aren\'t colinear)\n')
        g.write('//    You must specify the X & Y coordinates of all 3 points\n')
        g.write('\n')
        g.write('  #define AUTO_BED_LEVELING_GRID\n')
        g.write('  // with AUTO_BED_LEVELING_GRID, the bed is sampled in a\n')
        g.write('  // AUTO_BED_LEVELING_GRID_POINTSxAUTO_BED_LEVELING_GRID_POINTS grid\n')
        g.write('  // and least squares solution is calculated\n')
        g.write('  // Note: this feature occupies 10\'206 byte\n')
        g.write('  #ifdef AUTO_BED_LEVELING_GRID\n')
        g.write('\n')
        g.write('    // set the rectangle in which to probe\n')
        g.write('    #define LEFT_PROBE_BED_POSITION 15\n')
        g.write('    #define RIGHT_PROBE_BED_POSITION 170\n')
        g.write('    #define BACK_PROBE_BED_POSITION 180\n')
        g.write('    #define FRONT_PROBE_BED_POSITION 20\n')
        g.write('\n')
        g.write('     // set the number of grid points per dimension\n')
        g.write('     // I wouldn\'t see a reason to go above 3 (=9 probing points on the bed)\n')
        g.write('    #define AUTO_BED_LEVELING_GRID_POINTS 2\n')
        g.write('\n')
        g.write('\n')
        g.write('  #else  // not AUTO_BED_LEVELING_GRID\n')
        g.write('    // with no grid, just probe 3 arbitrary points.  A simple cross-product\n')
        g.write('    // is used to esimate the plane of the print bed\n')
        g.write('\n')
        g.write('      #define ABL_PROBE_PT_1_X 15\n')
        g.write('      #define ABL_PROBE_PT_1_Y 180\n')
        g.write('      #define ABL_PROBE_PT_2_X 15\n')
        g.write('      #define ABL_PROBE_PT_2_Y 20\n')
        g.write('      #define ABL_PROBE_PT_3_X 170\n')
        g.write('      #define ABL_PROBE_PT_3_Y 20\n')
        g.write('\n')
        g.write('  #endif // AUTO_BED_LEVELING_GRID\n')
        g.write('\n')
        g.write('\n')
        g.write('  // these are the offsets to the probe relative to the extruder tip (Hotend - Probe)\n')
        g.write('  // X and Y offsets must be integers\n')
        g.write('  #define X_PROBE_OFFSET_FROM_EXTRUDER -25\n')
        g.write('  #define Y_PROBE_OFFSET_FROM_EXTRUDER -29\n')
        g.write('  #define Z_PROBE_OFFSET_FROM_EXTRUDER -12.35\n')
        g.write('\n')
        g.write('  #define Z_RAISE_BEFORE_HOMING 4       // (in mm) Raise Z before homing (G28) for Probe Clearance.\n')
        g.write('                                        // Be sure you have this distance over your Z_MAX_POS in case\n')
        g.write('\n')
        g.write('  #define XY_TRAVEL_SPEED 8000         // X and Y axis travel speed between probes, in mm/min\n')
        g.write('\n')
        g.write('  #define Z_RAISE_BEFORE_PROBING 15    //How much the extruder will be raised before traveling to the first probing point.\n')
        g.write('  #define Z_RAISE_BETWEEN_PROBINGS 5  //How much the extruder will be raised when traveling from between next probing points\n')
        g.write('\n')
        g.write('  //#define Z_PROBE_SLED // turn on if you have a z-probe mounted on a sled like those designed by Charles Bell\n')
        g.write('  //#define SLED_DOCKING_OFFSET 5 // the extra distance the X axis must travel to pickup the sled. 0 should be fine but you can push it further if you\'d like.\n')
        g.write('\n')
        g.write('  //If defined, the Probe servo will be turned on only during movement and then turned off to avoid jerk\n')
        g.write('  //The value is the delay to turn the servo off after powered on - depends on the servo speed; 300ms is good value, but you can try lower it.\n')
        g.write('  // You MUST HAVE the SERVO_ENDSTOPS defined to use here a value higher than zero otherwise your code will not compile.\n')
        g.write('\n')
        g.write('//  #define PROBE_SERVO_DEACTIVATION_DELAY 300\n')
        g.write('\n')
        g.write('\n')
        g.write('//If you have enabled the Bed Auto Leveling and are using the same Z Probe for Z Homing,\n')
        g.write('//it is highly recommended you let this Z_SAFE_HOMING enabled!!!\n')
        g.write('\n')
        g.write('  #define Z_SAFE_HOMING   // This feature is meant to avoid Z homing with probe outside the bed area.\n')
        g.write('                          // When defined, it will:\n')
        g.write('                          // - Allow Z homing only after X and Y homing AND stepper drivers still enabled\n')
        g.write('                          // - If stepper drivers timeout, it will need X and Y homing again before Z homing\n')
        g.write('                          // - Position the probe in a defined XY point before Z Homing when homing all axis (G28)\n')
        g.write('                          // - Block Z homing only when the probe is outside bed area.\n')
        g.write('\n')
        g.write('  #ifdef Z_SAFE_HOMING\n')
        g.write('\n')
        g.write('    #define Z_SAFE_HOMING_X_POINT (X_MAX_LENGTH/2)    // X point for Z homing when homing all axis (G28)\n')
        g.write('    #define Z_SAFE_HOMING_Y_POINT (Y_MAX_LENGTH/2)    // Y point for Z homing when homing all axis (G28)\n')
        g.write('\n')
        g.write('  #endif\n')
        g.write('\n')
        g.write('  #ifdef AUTO_BED_LEVELING_GRID	// Check if Probe_Offset * Grid Points is greater than Probing Range\n')
        g.write('    #if X_PROBE_OFFSET_FROM_EXTRUDER < 0\n')
        g.write('      #if (-(X_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (RIGHT_PROBE_BED_POSITION - LEFT_PROBE_BED_POSITION))\n')
        g.write('	     #error "The X axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS"\n')
        g.write('	  #endif\n')
        g.write('	#else\n')
        g.write('      #if ((X_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (RIGHT_PROBE_BED_POSITION - LEFT_PROBE_BED_POSITION))\n')
        g.write('	     #error "The X axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS"\n')
        g.write('	  #endif\n')
        g.write('	#endif\n')
        g.write('    #if Y_PROBE_OFFSET_FROM_EXTRUDER < 0\n')
        g.write('      #if (-(Y_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (BACK_PROBE_BED_POSITION - FRONT_PROBE_BED_POSITION))\n')
        g.write('	     #error "The Y axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS"\n')
        g.write('	  #endif\n')
        g.write('	#else\n')
        g.write('      #if ((Y_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (BACK_PROBE_BED_POSITION - FRONT_PROBE_BED_POSITION))\n')
        g.write('	     #error "The Y axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS"\n')
        g.write('	  #endif\n')
        g.write('	#endif\n')
        g.write('\n')
        g.write('\n')
        g.write('  #endif\n')
        g.write('\n')
        g.write('#endif // ENABLE_AUTO_BED_LEVELING\n')
        g.write('\n')
        g.write('\n')
        g.write('// The position of the homing switches\n')
        g.write('//#define MANUAL_HOME_POSITIONS  // If defined, MANUAL_*_HOME_POS below will be used\n')
        g.write('//#define BED_CENTER_AT_0_0  // If defined, the center of the bed is at (X=0, Y=0)\n')
        g.write('\n')
        g.write('//Manual homing switch locations:\n')
        g.write('// For deltabots this means top and center of the Cartesian print volume.\n')
        g.write('#define MANUAL_X_HOME_POS 0\n')
        g.write('#define MANUAL_Y_HOME_POS 0\n')
        g.write('#define MANUAL_Z_HOME_POS 0\n')
        g.write('//#define MANUAL_Z_HOME_POS 402 // For delta: Distance between nozzle and print surface after homing.\n')
        g.write('\n')
        g.write('//// MOVEMENT SETTINGS\n')
        g.write('#define NUM_AXIS 4 // The axis order in all axis related arrays is X, Y, Z, E\n')
        g.write('#define HOMING_FEEDRATE {50*60, 50*60, 4*60, 0}  // set the homing speeds (mm/min)\n')
        g.write('\n')
        g.write('// default settings\n')
        g.write('\n')
        g.write('#define DEFAULT_AXIS_STEPS_PER_UNIT   {78.7402,78.7402,200.0*8/3,760*1.1}  // default steps per unit for Ultimaker\n')
        g.write('#define DEFAULT_MAX_FEEDRATE          {500, 500, 5, 25}    // (mm/sec)\n')
        g.write('#define DEFAULT_MAX_ACCELERATION      {9000,9000,100,10000}    // X, Y, Z, E maximum start speed for accelerated moves. E default values are good for Skeinforge 40+, for older versions raise them a lot.\n')
        g.write('\n')
        g.write('#define DEFAULT_ACCELERATION          3000    // X, Y, Z and E max acceleration in mm/s^2 for printing moves\n')
        g.write('#define DEFAULT_RETRACT_ACCELERATION  3000   // X, Y, Z and E max acceleration in mm/s^2 for retracts\n')
        g.write('\n')
        g.write('// Offset of the extruders (uncomment if using more than one and relying on firmware to position when changing).\n')
        g.write('// The offset has to be X=0, Y=0 for the extruder 0 hotend (default extruder).\n')
        g.write('// For the other hotends it is their distance from the extruder 0 hotend.\n')
        g.write('// #define EXTRUDER_OFFSET_X {0.0, 20.00} // (in mm) for each extruder, offset of the hotend on the X axis\n')
        g.write('// #define EXTRUDER_OFFSET_Y {0.0, 5.00}  // (in mm) for each extruder, offset of the hotend on the Y axis\n')
        g.write('\n')
        g.write('// The speed change that does not require acceleration (i.e. the software might assume it can be done instantaneously)\n')
        g.write('#define DEFAULT_XYJERK                20.0    // (mm/sec)\n')
        g.write('#define DEFAULT_ZJERK                 0.4     // (mm/sec)\n')
        g.write('#define DEFAULT_EJERK                 5.0    // (mm/sec)\n')
        g.write('\n')
        g.write('//===========================================================================\n')
        g.write('//=============================Additional Features===========================\n')
        g.write('//===========================================================================\n')
        g.write('\n')
        g.write('// Custom M code points\n')
        g.write('#define CUSTOM_M_CODES\n')
        g.write('#ifdef CUSTOM_M_CODES\n')
        g.write('  #define CUSTOM_M_CODE_SET_Z_PROBE_OFFSET 851\n')
        g.write('  #define Z_PROBE_OFFSET_RANGE_MIN -15\n')
        g.write('  #define Z_PROBE_OFFSET_RANGE_MAX -5\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('\n')
        g.write('// EEPROM\n')
        g.write('// The microcontroller can store settings in the EEPROM, e.g. max velocity...\n')
        g.write('// M500 - stores parameters in EEPROM\n')
        g.write('// M501 - reads parameters from EEPROM (if you need reset them after you changed them temporarily).\n')
        g.write('// M502 - reverts to the default "factory settings".  You still need to store them in EEPROM afterwards if you want to.\n')
        g.write('//define this to enable EEPROM support\n')
        g.write('//#define EEPROM_SETTINGS\n')
        g.write('//to disable EEPROM Serial responses and decrease program space by ~1700 byte: comment this out:\n')
        g.write('// please keep turned on if you can.\n')
        g.write('//#define EEPROM_CHITCHAT\n')
        g.write('\n')
        g.write('// Preheat Constants\n')
        g.write('#define PLA_PREHEAT_HOTEND_TEMP 180\n')
        g.write('#define PLA_PREHEAT_HPB_TEMP 70\n')
        g.write('#define PLA_PREHEAT_FAN_SPEED 255   // Insert Value between 0 and 255\n')
        g.write('\n')
        g.write('#define ABS_PREHEAT_HOTEND_TEMP 240\n')
        g.write('#define ABS_PREHEAT_HPB_TEMP 100\n')
        g.write('#define ABS_PREHEAT_FAN_SPEED 255   // Insert Value between 0 and 255\n')
        g.write('\n')
        g.write('//LCD and SD support\n')
        g.write('//#define ULTRA_LCD  //general LCD support, also 16x2\n')
        g.write('//#define DOGLCD  // Support for SPI LCD 128x64 (Controller ST7565R graphic Display Family)\n')
        g.write('//#define SDSUPPORT // Enable SD Card Support in Hardware Console\n')
        g.write('//#define SDSLOW // Use slower SD transfer mode (not normally needed - uncomment if you\'re getting volume init error)\n')
        g.write('//#define SD_CHECK_AND_RETRY // Use CRC checks and retries on the SD communication\n')
        g.write('//#define ENCODER_PULSES_PER_STEP 1 // Increase if you have a high resolution encoder\n')
        g.write('//#define ENCODER_STEPS_PER_MENU_ITEM 5 // Set according to ENCODER_PULSES_PER_STEP or your liking\n')
        g.write('//#define ULTIMAKERCONTROLLER //as available from the Ultimaker online store.\n')
        g.write('//#define ULTIPANEL  //the UltiPanel as on Thingiverse\n')
        g.write('//#define LCD_FEEDBACK_FREQUENCY_HZ 1000	// this is the tone frequency the buzzer plays when on UI feedback. ie Screen Click\n')
        g.write('//#define LCD_FEEDBACK_FREQUENCY_DURATION_MS 100 // the duration the buzzer plays the UI feedback sound. ie Screen Click\n')
        g.write('\n')
        g.write('// The MaKr3d Makr-Panel with graphic controller and SD support\n')
        g.write('// http://reprap.org/wiki/MaKr3d_MaKrPanel\n')
        g.write('//#define MAKRPANEL\n')
        g.write('\n')
        g.write('// The RepRapDiscount Smart Controller (white PCB)\n')
        g.write('// http://reprap.org/wiki/RepRapDiscount_Smart_Controller\n')
        g.write('//#define REPRAP_DISCOUNT_SMART_CONTROLLER\n')
        g.write('\n')
        g.write('// The GADGETS3D G3D LCD/SD Controller (blue PCB)\n')
        g.write('// http://reprap.org/wiki/RAMPS_1.3/1.4_GADGETS3D_Shield_with_Panel\n')
        g.write('//#define G3D_PANEL\n')
        g.write('\n')
        g.write('// The RepRapDiscount FULL GRAPHIC Smart Controller (quadratic white PCB)\n')
        g.write('// http://reprap.org/wiki/RepRapDiscount_Full_Graphic_Smart_Controller\n')
        g.write('//\n')
        g.write('// ==> REMEMBER TO INSTALL U8glib to your ARDUINO library folder: http://code.google.com/p/u8glib/wiki/u8glib\n')
        g.write('//#define REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER\n')
        g.write('\n')
        g.write('// The RepRapWorld REPRAPWORLD_KEYPAD v1.1\n')
        g.write('// http://reprapworld.com/?products_details&products_id=202&cPath=1591_1626\n')
        g.write('//#define REPRAPWORLD_KEYPAD\n')
        g.write('//#define REPRAPWORLD_KEYPAD_MOVE_STEP 10.0 // how much should be moved when a key is pressed, eg 10.0 means 10mm per click\n')
        g.write('\n')
        g.write('// The Elefu RA Board Control Panel\n')
        g.write('// http://www.elefu.com/index.php?route=product/product&product_id=53\n')
        g.write('// REMEMBER TO INSTALL LiquidCrystal_I2C.h in your ARDUINO library folder: https://github.com/kiyoshigawa/LiquidCrystal_I2C\n')
        g.write('//#define RA_CONTROL_PANEL\n')
        g.write('\n')
        g.write('//automatic expansion\n')
        g.write('#if defined (MAKRPANEL)\n')
        g.write(' #define DOGLCD\n')
        g.write(' #define SDSUPPORT\n')
        g.write(' #define ULTIPANEL\n')
        g.write(' #define NEWPANEL\n')
        g.write(' #define DEFAULT_LCD_CONTRAST 17\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('#if defined (REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER)\n')
        g.write(' #define DOGLCD\n')
        g.write(' #define U8GLIB_ST7920\n')
        g.write(' #define REPRAP_DISCOUNT_SMART_CONTROLLER\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('#if defined(ULTIMAKERCONTROLLER) || defined(REPRAP_DISCOUNT_SMART_CONTROLLER) || defined(G3D_PANEL)\n')
        g.write(' #define ULTIPANEL\n')
        g.write(' #define NEWPANEL\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('#if defined(REPRAPWORLD_KEYPAD)\n')
        g.write('  #define NEWPANEL\n')
        g.write('  #define ULTIPANEL\n')
        g.write('#endif\n')
        g.write('#if defined(RA_CONTROL_PANEL)\n')
        g.write(' #define ULTIPANEL\n')
        g.write(' #define NEWPANEL\n')
        g.write(' #define LCD_I2C_TYPE_PCA8574\n')
        g.write(' #define LCD_I2C_ADDRESS 0x27   // I2C Address of the port expander\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('//I2C PANELS\n')
        g.write('\n')
        g.write('//#define LCD_I2C_SAINSMART_YWROBOT\n')
        g.write('#ifdef LCD_I2C_SAINSMART_YWROBOT\n')
        g.write('  // This uses the LiquidCrystal_I2C library ( https://bitbucket.org/fmalpartida/new-liquidcrystal/wiki/Home )\n')
        g.write('  // Make sure it is placed in the Arduino libraries directory.\n')
        g.write('  #define LCD_I2C_TYPE_PCF8575\n')
        g.write('  #define LCD_I2C_ADDRESS 0x27   // I2C Address of the port expander\n')
        g.write('  #define NEWPANEL\n')
        g.write('  #define ULTIPANEL\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// PANELOLU2 LCD with status LEDs, separate encoder and click inputs\n')
        g.write('//#define LCD_I2C_PANELOLU2\n')
        g.write('#ifdef LCD_I2C_PANELOLU2\n')
        g.write('  // This uses the LiquidTWI2 library v1.2.3 or later ( https://github.com/lincomatic/LiquidTWI2 )\n')
        g.write('  // Make sure the LiquidTWI2 directory is placed in the Arduino or Sketchbook libraries subdirectory.\n')
        g.write('  // (v1.2.3 no longer requires you to define PANELOLU in the LiquidTWI2.h library header file)\n')
        g.write('  // Note: The PANELOLU2 encoder click input can either be directly connected to a pin\n')
        g.write('  //       (if BTN_ENC defined to != -1) or read through I2C (when BTN_ENC == -1).\n')
        g.write('  #define LCD_I2C_TYPE_MCP23017\n')
        g.write('  #define LCD_I2C_ADDRESS 0x20 // I2C Address of the port expander\n')
        g.write('  #define LCD_USE_I2C_BUZZER //comment out to disable buzzer on LCD\n')
        g.write('  #define NEWPANEL\n')
        g.write('  #define ULTIPANEL\n')
        g.write('\n')
        g.write('  #ifndef ENCODER_PULSES_PER_STEP\n')
        g.write('	#define ENCODER_PULSES_PER_STEP 4\n')
        g.write('  #endif\n')
        g.write('\n')
        g.write('  #ifndef ENCODER_STEPS_PER_MENU_ITEM\n')
        g.write('	#define ENCODER_STEPS_PER_MENU_ITEM 1\n')
        g.write('  #endif\n')
        g.write('\n')
        g.write('\n')
        g.write('  #ifdef LCD_USE_I2C_BUZZER\n')
        g.write('	#define LCD_FEEDBACK_FREQUENCY_HZ 1000\n')
        g.write('	#define LCD_FEEDBACK_FREQUENCY_DURATION_MS 100\n')
        g.write('  #endif\n')
        g.write('\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// Panucatt VIKI LCD with status LEDs, integrated click & L/R/U/P buttons, separate encoder inputs\n')
        g.write('//#define LCD_I2C_VIKI\n')
        g.write('#ifdef LCD_I2C_VIKI\n')
        g.write('  // This uses the LiquidTWI2 library v1.2.3 or later ( https://github.com/lincomatic/LiquidTWI2 )\n')
        g.write('  // Make sure the LiquidTWI2 directory is placed in the Arduino or Sketchbook libraries subdirectory.\n')
        g.write('  // Note: The pause/stop/resume LCD button pin should be connected to the Arduino\n')
        g.write('  //       BTN_ENC pin (or set BTN_ENC to -1 if not used)\n')
        g.write('  #define LCD_I2C_TYPE_MCP23017\n')
        g.write('  #define LCD_I2C_ADDRESS 0x20 // I2C Address of the port expander\n')
        g.write('  #define LCD_USE_I2C_BUZZER //comment out to disable buzzer on LCD (requires LiquidTWI2 v1.2.3 or later)\n')
        g.write('  #define NEWPANEL\n')
        g.write('  #define ULTIPANEL\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// Shift register panels\n')
        g.write('// ---------------------\n')
        g.write('// 2 wire Non-latching LCD SR from:\n')
        g.write('// https://bitbucket.org/fmalpartida/new-liquidcrystal/wiki/schematics#!shiftregister-connection\n')
        g.write('\n')
        g.write('//#define SAV_3DLCD\n')
        g.write('#ifdef SAV_3DLCD\n')
        g.write('   #define SR_LCD_2W_NL    // Non latching 2 wire shiftregister\n')
        g.write('   #define NEWPANEL\n')
        g.write('   #define ULTIPANEL\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('\n')
        g.write('#ifdef ULTIPANEL\n')
        g.write('//  #define NEWPANEL  //enable this if you have a click-encoder panel\n')
        g.write('  #define SDSUPPORT\n')
        g.write('  #define ULTRA_LCD\n')
        g.write('  #ifdef DOGLCD // Change number of lines to match the DOG graphic display\n')
        g.write('    #define LCD_WIDTH 20\n')
        g.write('    #define LCD_HEIGHT 5\n')
        g.write('  #else\n')
        g.write('    #define LCD_WIDTH 20\n')
        g.write('    #define LCD_HEIGHT 4\n')
        g.write('  #endif\n')
        g.write('#else //no panel but just LCD\n')
        g.write('  #ifdef ULTRA_LCD\n')
        g.write('  #ifdef DOGLCD // Change number of lines to match the 128x64 graphics display\n')
        g.write('    #define LCD_WIDTH 20\n')
        g.write('    #define LCD_HEIGHT 5\n')
        g.write('  #else\n')
        g.write('    #define LCD_WIDTH 16\n')
        g.write('    #define LCD_HEIGHT 2\n')
        g.write('  #endif\n')
        g.write('  #endif\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// default LCD contrast for dogm-like LCD displays\n')
        g.write('#ifdef DOGLCD\n')
        g.write('# ifndef DEFAULT_LCD_CONTRAST\n')
        g.write('#  define DEFAULT_LCD_CONTRAST 32\n')
        g.write('# endif\n')
        g.write('#endif\n')
        g.write('\n')
        g.write('// Increase the FAN pwm frequency. Removes the PWM noise but increases heating in the FET/Arduino\n')
        g.write('//#define FAST_PWM_FAN\n')
        g.write('\n')
        g.write('// Temperature status LEDs that display the hotend and bet temperature.\n')
        g.write('// If all hotends and bed temperature and temperature setpoint are < 54C then the BLUE led is on.\n')
        g.write('// Otherwise the RED led is on. There is 1C hysteresis.\n')
        g.write('//#define TEMP_STAT_LEDS\n')
        g.write('\n')
        g.write('// Use software PWM to drive the fan, as for the heaters. This uses a very low frequency\n')
        g.write('// which is not ass annoying as with the hardware PWM. On the other hand, if this frequency\n')
        g.write('// is too low, you should also increment SOFT_PWM_SCALE.\n')
        g.write('//#define FAN_SOFT_PWM\n')
        g.write('\n')
        g.write('// Incrementing this by 1 will double the software PWM frequency,\n')
        g.write('// affecting heaters, and the fan if FAN_SOFT_PWM is enabled.\n')
        g.write('// However, control resolution will be halved for each increment;\n')
        g.write('// at zero value, there are 128 effective control positions.\n')
        g.write('#define SOFT_PWM_SCALE 0\n')
        g.write('\n')
        g.write('// M240  Triggers a camera by emulating a Canon RC-1 Remote\n')
        g.write('// Data from: http://www.doc-diy.net/photo/rc-1_hacked/\n')
        g.write('// #define PHOTOGRAPH_PIN     23\n')
        g.write('\n')
        g.write('// SF send wrong arc g-codes when using Arc Point as fillet procedure\n')
        g.write('//#define SF_ARC_FIX\n')
        g.write('\n')
        g.write('// Support for the BariCUDA Paste Extruder.\n')
        g.write('//#define BARICUDA\n')
        g.write('\n')
        g.write('//define BlinkM/CyzRgb Support\n')
        g.write('//#define BLINKM\n')
        g.write('\n')
        g.write('/*********************************************************************\n')
        g.write('* R/C SERVO support\n')
        g.write('* Sponsored by TrinityLabs, Reworked by codexmas\n')
        g.write('**********************************************************************/\n')
        g.write('\n')
        g.write('// Number of servos\n')
        g.write('//\n')
        g.write('// If you select a configuration below, this will receive a default value and does not need to be set manually\n')
        g.write('// set it manually if you have more servos than extruders and wish to manually control some\n')
        g.write('// leaving it undefined or defining as 0 will disable the servo subsystem\n')
        g.write('// If unsure, leave commented / disabled\n')
        g.write('//\n')
        g.write('//#define NUM_SERVOS 3 // Servo index starts with 0 for M280 command\n')
        g.write('\n')
        g.write('// Servo Endstops\n')
        g.write('//\n')
        g.write('// This allows for servo actuated endstops, primary usage is for the Z Axis to eliminate calibration or bed height changes.\n')
        g.write('// Use M206 command to correct for switch height offset to actual nozzle height. Store that setting with M500.\n')
        g.write('//\n')
        g.write('//#define SERVO_ENDSTOPS {-1, -1, 0} // Servo index for X, Y, Z. Disable with -1\n')
        g.write('//#define SERVO_ENDSTOP_ANGLES {0,0, 0,0, 70,0} // X,Y,Z Axis Extend and Retract angles\n')
        g.write('\n')
        g.write('/**********************************************************************\n')
        g.write(' * Support for a filament diameter sensor\n')
        g.write(' * Also allows adjustment of diameter at print time (vs  at slicing)\n')
        g.write(' * Single extruder only at this point (extruder 0)\n')
        g.write(' *\n')
        g.write(' * Motherboards\n')
        g.write(' * 34 - RAMPS1.4 - uses Analog input 5 on the AUX2 connector\n')
        g.write(' * 81 - Printrboard - Uses Analog input 2 on the Exp1 connector (version B,C,D,E)\n')
        g.write(' * 301 - Rambo  - uses Analog input 3\n')
        g.write(' * Note may require analog pins to be defined for different motherboards\n')
        g.write(' **********************************************************************/\n')
        g.write('// Uncomment below to enable\n')
        g.write('//#define FILAMENT_SENSOR\n')
        g.write('\n')
        g.write('#define FILAMENT_SENSOR_EXTRUDER_NUM	0  //The number of the extruder that has the filament sensor (0,1,2)\n')
        g.write('#define MEASUREMENT_DELAY_CM			14  //measurement delay in cm.  This is the distance from filament sensor to middle of barrel\n')
        g.write('\n')
        g.write('#define DEFAULT_NOMINAL_FILAMENT_DIA  3.0  //Enter the diameter (in mm) of the filament generally used (3.0 mm or 1.75 mm) - this is then used in the slicer software.  Used for sensor reading validation\n')
        g.write('#define MEASURED_UPPER_LIMIT          3.30  //upper limit factor used for sensor reading validation in mm\n')
        g.write('#define MEASURED_LOWER_LIMIT          1.90  //lower limit factor for sensor reading validation in mm\n')
        g.write('#define MAX_MEASUREMENT_DELAY			20  //delay buffer size in bytes (1 byte = 1cm)- limits maximum measurement delay allowable (must be larger than MEASUREMENT_DELAY_CM  and lower number saves RAM)\n')
        g.write('\n')
        g.write('//defines used in the code\n')
        g.write('#define DEFAULT_MEASURED_FILAMENT_DIA  DEFAULT_NOMINAL_FILAMENT_DIA  //set measured to nominal initially\n')
        g.write('\n')
        g.write('//When using an LCD, uncomment the line below to display the Filament sensor data on the last line instead of status.  Status will appear for 5 sec.\n')
        g.write('//#define FILAMENT_LCD_DISPLAY\n')
        g.write('\n')
        g.write('\n')
        g.write('\n')
        g.write('\n')
        g.write('\n')
        g.write('\n')
        g.write('#include "Configuration_adv.h"\n')
        g.write('#include "thermistortables.h"\n')
        g.write('\n')
        g.write('#endif //__CONFIGURATION_H\n')
        g.write('\n\n')
        g.close()
        pins()


def pins():
        date = datetime.date.today().strftime("%m_%d_%Y")
        printerDir = gv.printerDir+"Printer_"+date+"\\"

        f = open(printerDir+'Marlin\\pins.h','a')
        f.write('#ifndef PINS_H\n')
        f.write('#define PINS_H\n')
        f.write('\n')
        f.write('#include "boards.h"\n')
        f.write('\n')
        f.write('#if !MB(5DPRINT)\n')
        f.write('#define X_MS1_PIN -1\n')
        f.write('#define X_MS2_PIN -1\n')
        f.write('#define Y_MS1_PIN -1\n')
        f.write('#define Y_MS2_PIN -1\n')
        f.write('#define Z_MS1_PIN -1\n')
        f.write('#define Z_MS2_PIN -1\n')
        f.write('#define E0_MS1_PIN -1\n')
        f.write('#define E0_MS2_PIN -1\n')
        f.write('#define E1_MS1_PIN -1\n')
        f.write('#define E1_MS2_PIN -1\n')
        f.write('#define DIGIPOTSS_PIN -1\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* 5DPrint D8 Driver board\n')
        f.write('* https://bitbucket.org/makible/5dprint-d8-controller-board\n')
        f.write('****************************************************************************************/\n')
        f.write('\n')
        f.write('#if MB(5DPRINT)\n')
        f.write('\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#define AT90USB 1286  // Disable MarlinSerial etc.\n')
        f.write('\n')
        f.write('#ifndef __AVR_AT90USB1286__\n')
        f.write('#error Oops!  Make sure you have \'Teensy++ 2.0\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH        true\n')
        f.write('\n')
        f.write('#define X_STEP_PIN          0\n')
        f.write('#define X_DIR_PIN           1\n')
        f.write('#define X_ENABLE_PIN       23\n')
        f.write('#define X_STOP_PIN         37\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN          2\n')
        f.write('#define Y_DIR_PIN           3\n')
        f.write('#define Y_ENABLE_PIN       19\n')
        f.write('#define Y_STOP_PIN         36\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN          4\n')
        f.write('#define Z_DIR_PIN           5\n')
        f.write('#define Z_ENABLE_PIN       18\n')
        f.write('#define Z_STOP_PIN         39\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         6\n')
        f.write('#define E0_DIR_PIN          7\n')
        f.write('#define E0_ENABLE_PIN      17\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       21  // Extruder\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define HEATER_BED_PIN     20  // Bed\n')
        f.write('// You may need to change FAN_PIN to 16 because Marlin isn\'t using fastio.h\n')
        f.write('// for the fan and Teensyduino uses a different pin mapping.\n')
        f.write('#define FAN_PIN            16  // Fan\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN          1  // Extruder / Analog pin numbering\n')
        f.write('#define TEMP_BED_PIN        0  // Bed / Analog pin numbering\n')
        f.write('\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define ALARM_PIN          -1\n')
        f.write('\n')
        f.write('// The SDSS pin uses a different pin mapping from file Sd2PinMap.h\n')
        f.write('#define SDSS               20\n')
        f.write('\n')
        f.write('#ifndef SDSUPPORT\n')
        f.write('// these pins are defined in the SD library if building with SD support\n')
        f.write('  #define SCK_PIN           9\n')
        f.write('  #define MISO_PIN         11\n')
        f.write('  #define MOSI_PIN         10\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('// Microstepping pins\n')
        f.write('// Note that the pin mapping is not from fastio.h\n')
        f.write('// See Sd2PinMap.h for the pin configurations\n')
        f.write('#define X_MS1_PIN 25\n')
        f.write('#define X_MS2_PIN 26\n')
        f.write('#define Y_MS1_PIN 9\n')
        f.write('#define Y_MS2_PIN 8\n')
        f.write('#define Z_MS1_PIN 7\n')
        f.write('#define Z_MS2_PIN 6\n')
        f.write('#define E0_MS1_PIN 5\n')
        f.write('#define E0_MS2_PIN 4\n')
        f.write('\n')
        f.write('#endif // 5DPRINT\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Leapfrog Driver board\n')
        f.write('* \n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(LEAPFROG)  // Leapfrog board\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega1280__\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         28\n')
        f.write('#define X_DIR_PIN          63\n')
        f.write('#define X_ENABLE_PIN       29\n')
        f.write('#define X_MIN_PIN          47\n')
        f.write('#define X_MAX_PIN          -1   //2 //Max endstops default to disabled "-1", set to commented value to enable.\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         14 // A6\n')
        f.write('#define Y_DIR_PIN          15 // A0\n')
        f.write('#define Y_ENABLE_PIN       39\n')
        f.write('#define Y_MIN_PIN          48\n')
        f.write('#define Y_MAX_PIN          -1   //15\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         31 // A2\n')
        f.write('#define Z_DIR_PIN          32 // A6\n')
        f.write('#define Z_ENABLE_PIN       30 // A1\n')
        f.write('#define Z_MIN_PIN          49\n')
        f.write('#define Z_MAX_PIN          -1\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         34  //34\n')
        f.write('#define E0_DIR_PIN          35 //35\n')
        f.write('#define E0_ENABLE_PIN       33 //33\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         37 //37\n')
        f.write('#define E1_DIR_PIN          40 //40\n')
        f.write('#define E1_ENABLE_PIN       36 //36\n')
        f.write('\n')
        f.write('#define Y2_STEP_PIN         37\n')
        f.write('#define Y2_DIR_PIN          40\n')
        f.write('#define Y2_ENABLE_PIN       36\n')
        f.write('\n')
        f.write('#define Z2_STEP_PIN         37\n')
        f.write('#define Z2_DIR_PIN          40\n')
        f.write('#define Z2_ENABLE_PIN       36\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               11\n')
        f.write('#define SDCARDDETECT       -1 // 10 optional also used as mode pin\n')
        f.write('#define LED_PIN            13\n')
        f.write('#define FAN_PIN            7\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define SOL1_PIN   16\n')
        f.write('#define SOL2_PIN    17\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       9\n')
        f.write('#define HEATER_1_PIN       8 // 12\n')
        f.write('#define HEATER_2_PIN       11 //-1 // 13\n')
        f.write('#define TEMP_0_PIN         13 //D27   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define TEMP_1_PIN         15 // 1\n')
        f.write('#define TEMP_2_PIN         -1 // 2\n')
        f.write('#define HEATER_BED_PIN     10 // 14/15\n')
        f.write('#define TEMP_BED_PIN       14 // 1,2 or I2C\n')
        f.write('/*  Unused (1) (2) (3) 4 5 6 7 8 9 10 11 12 13 (14) (15) (16) 17 (18) (19) (20) (21) (22) (23) 24 (25) (26) (27) 28 (29) (30) (31)  */\n')
        f.write('\n')
        f.write('\n')
        f.write('#endif // LEAPFROG\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('*\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('\n')
        f.write('#if MB(99)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#define X_STEP_PIN          2\n')
        f.write('#define X_DIR_PIN           3\n')
        f.write('#define X_ENABLE_PIN        -1\n')
        f.write('#define X_STOP_PIN          16\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN          5\n')
        f.write('#define Y_DIR_PIN           6\n')
        f.write('#define Y_ENABLE_PIN       -1\n')
        f.write('#define Y_STOP_PIN          67\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN          62\n')
        f.write('#define Z_DIR_PIN           63\n')
        f.write('#define Z_ENABLE_PIN       -1\n')
        f.write('#define Z_STOP_PIN          59\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         65\n')
        f.write('#define E0_DIR_PIN          66\n')
        f.write('#define E0_ENABLE_PIN      -1\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               53\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define FAN_PIN            -1\n')
        f.write('#define PS_ON_PIN           9\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN        13\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define TEMP_0_PIN          6   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define TEMP_1_PIN         -1   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define TEMP_2_PIN         -1   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define HEATER_BED_PIN      4\n')
        f.write('#define TEMP_BED_PIN       10\n')
        f.write('\n')
        f.write('#endif // 99\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Sethi 3D_1 pin assignment - www.sethi3d.com.br\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('\n')
        f.write('#if MB(SETHI)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('\n')
        f.write('#if !defined(__AVR_ATmega644P__) && !defined(__AVR_ATmega644__) && !defined(__AVR_ATmega1284P__)\n')
        f.write('#error Oops! Make sure you have \'Sethi 3D\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifndef GEN7_VERSION\n')
        f.write('#define GEN7_VERSION 12 // v1.x\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//x axis pins\n')
        f.write('#define X_STEP_PIN 19\n')
        f.write('#define X_DIR_PIN 18\n')
        f.write('#define X_ENABLE_PIN 24\n')
        f.write('#define X_STOP_PIN 2\n')
        f.write('\n')
        f.write('//y axis pins\n')
        f.write('#define Y_STEP_PIN 23\n')
        f.write('#define Y_DIR_PIN 22\n')
        f.write('#define Y_ENABLE_PIN 24\n')
        f.write('#define Y_STOP_PIN 0\n')
        f.write('\n')
        f.write('//z axis pins\n')
        f.write('#define Z_STEP_PIN 26\n')
        f.write('#define Z_DIR_PIN 25\n')
        f.write('#define Z_ENABLE_PIN 24\n')
        f.write('#define Z_MIN_PIN 1\n')
        f.write('#define Z_MAX_PIN 0\n')
        f.write('\n')
        f.write('//extruder pins\n')
        f.write('#define E0_STEP_PIN 28\n')
        f.write('#define E0_DIR_PIN 27\n')
        f.write('#define E0_ENABLE_PIN 24\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN 1\n')
        f.write('#define TEMP_1_PIN -1\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('#define TEMP_BED_PIN 2\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN 4\n')
        f.write('#define HEATER_1_PIN -1\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#define HEATER_BED_PIN 3\n')
        f.write('\n')
        f.write('#define KILL_PIN -1\n')
        f.write('\n')
        f.write('#define SDPOWER -1\n')
        f.write('#define SDSS -1 // SCL pin of I2C header\n')
        f.write('#define LED_PIN -1\n')
        f.write('\n')
        f.write('#if (GEN7_VERSION >= 13)\n')
        f.write('// Gen7 v1.3 removed the fan pin\n')
        f.write('#define FAN_PIN -1\n')
        f.write('#else\n')
        f.write('#define FAN_PIN 31\n')
        f.write('#endif\n')
        f.write('#define PS_ON_PIN 15\n')
        f.write('\n')
        f.write('//All these generations of Gen7 supply thermistor power\n')
        f.write('//via PS_ON, so ignore bad thermistor readings\n')
        f.write('#define BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE\n')
        f.write('\n')
        f.write('//our pin for debugging.\n')
        f.write('#define DEBUG_PIN 0\n')
        f.write('\n')
        f.write('//our RS485 pins\n')
        f.write('#define TX_ENABLE_PIN 12\n')
        f.write('#define RX_ENABLE_PIN 13\n')
        f.write('\n')
        f.write('#endif // SETHI\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Gen7 v1.1, v1.2, v1.3 pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('\n')
        f.write('\n')
        f.write('#if MB(GEN7_13)\n')
        f.write('#define MOTHERBOARD BOARD_GEN7_12\n')
        f.write('#define GEN7_VERSION 13 // v1.3\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#if MB(GEN7_12)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('\n')
        f.write('#if !defined(__AVR_ATmega644P__) && !defined(__AVR_ATmega644__) && !defined(__AVR_ATmega1284P__)\n')
        f.write('#error Oops! Make sure you have \'Gen7\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifndef GEN7_VERSION\n')
        f.write('#define GEN7_VERSION 12 // v1.x\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//x axis pins\n')
        f.write('#define X_STEP_PIN 19\n')
        f.write('#define X_DIR_PIN 18\n')
        f.write('#define X_ENABLE_PIN 24\n')
        f.write('#define X_STOP_PIN 7\n')
        f.write('\n')
        f.write('//y axis pins\n')
        f.write('#define Y_STEP_PIN 23\n')
        f.write('#define Y_DIR_PIN 22\n')
        f.write('#define Y_ENABLE_PIN 24\n')
        f.write('#define Y_STOP_PIN 5\n')
        f.write('\n')
        f.write('//z axis pins\n')
        f.write('#define Z_STEP_PIN 26\n')
        f.write('#define Z_DIR_PIN 25\n')
        f.write('#define Z_ENABLE_PIN 24\n')
        f.write('#define Z_MIN_PIN 1\n')
        f.write('#define Z_MAX_PIN 0\n')
        f.write('\n')
        f.write('//extruder pins\n')
        f.write('#define E0_STEP_PIN 28\n')
        f.write('#define E0_DIR_PIN 27\n')
        f.write('#define E0_ENABLE_PIN 24\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN 1\n')
        f.write('#define TEMP_1_PIN -1\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('#define TEMP_BED_PIN 2\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN 4\n')
        f.write('#define HEATER_1_PIN -1\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#define HEATER_BED_PIN 3\n')
        f.write('\n')
        f.write('#define KILL_PIN -1\n')
        f.write('\n')
        f.write('#define SDPOWER -1\n')
        f.write('#define SDSS -1 // SCL pin of I2C header\n')
        f.write('#define LED_PIN -1\n')
        f.write('\n')
        f.write('#if (GEN7_VERSION >= 13)\n')
        f.write('// Gen7 v1.3 removed the fan pin\n')
        f.write('#define FAN_PIN -1\n')
        f.write('#else\n')
        f.write('#define FAN_PIN 31\n')
        f.write('#endif\n')
        f.write('#define PS_ON_PIN 15\n')
        f.write('\n')
        f.write('//All these generations of Gen7 supply thermistor power\n')
        f.write('//via PS_ON, so ignore bad thermistor readings\n')
        f.write('#define BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE\n')
        f.write('\n')
        f.write('//our pin for debugging.\n')
        f.write('#define DEBUG_PIN 0\n')
        f.write('\n')
        f.write('//our RS485 pins\n')
        f.write('#define TX_ENABLE_PIN 12\n')
        f.write('#define RX_ENABLE_PIN 13\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Gen7 v1.4 pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('\n')
        f.write('#if MB(GEN7_14)\n')
        f.write('#define GEN7_VERSION 14 // v1.4\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#if MB(GEN7_14)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('\n')
        f.write('#if !defined(__AVR_ATmega644P__) && !defined(__AVR_ATmega644__) && !defined(__AVR_ATmega1284P__)\n')
        f.write('#error Oops! Make sure you have \'Gen7\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifndef GEN7_VERSION\n')
        f.write('#define GEN7_VERSION 14 // v1.x\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//x axis pins\n')
        f.write('#define X_STEP_PIN 29\n')
        f.write('#define X_DIR_PIN 28\n')
        f.write('#define X_ENABLE_PIN 25\n')
        f.write('#define X_STOP_PIN 0\n')
        f.write('\n')
        f.write('//y axis pins\n')
        f.write('#define Y_STEP_PIN 27\n')
        f.write('#define Y_DIR_PIN 26\n')
        f.write('#define Y_ENABLE_PIN 25\n')
        f.write('#define Y_STOP_PIN 1\n')
        f.write('\n')
        f.write('//z axis pins\n')
        f.write('#define Z_STEP_PIN 23\n')
        f.write('#define Z_DIR_PIN 22\n')
        f.write('#define Z_ENABLE_PIN 25\n')
        f.write('#define Z_STOP_PIN 2\n')
        f.write('\n')
        f.write('//extruder pins\n')
        f.write('#define E0_STEP_PIN 19\n')
        f.write('#define E0_DIR_PIN 18\n')
        f.write('#define E0_ENABLE_PIN 25\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN 1\n')
        f.write('#define TEMP_1_PIN -1\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('#define TEMP_BED_PIN 0\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN 4\n')
        f.write('#define HEATER_1_PIN -1\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#define HEATER_BED_PIN 3\n')
        f.write('\n')
        f.write('#define KILL_PIN -1\n')
        f.write('\n')
        f.write('#define SDPOWER -1\n')
        f.write('#define SDSS -1 // SCL pin of I2C header\n')
        f.write('#define LED_PIN -1\n')
        f.write('\n')
        f.write('#define FAN_PIN -1\n')
        f.write('\n')
        f.write('#define PS_ON_PIN 15\n')
        f.write('\n')
        f.write('//our pin for debugging.\n')
        f.write('#define DEBUG_PIN 0\n')
        f.write('\n')
        f.write('//our RS485 pins\n')
        f.write('#define TX_ENABLE_PIN 12\n')
        f.write('#define RX_ENABLE_PIN 13\n')
        f.write('\n')
        f.write('#endif // GEN7\n')
        f.write('\n')
        f.write('/******************************************************************************\n')
        f.write('* Gen7 Alfons3  pin assignment\n')
        f.write('*\n')
        f.write('******************************************************************************/\n')
        f.write('/* These Pins are assigned for the modified GEN7 Board from Alfons3 Please review the pins and adjust it for your needs*/\n')
        f.write('\n')
        f.write('#if MB(GEN7_CUSTOM)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('\n')
        f.write('#if !defined(__AVR_ATmega644P__) && !defined(__AVR_ATmega644__) && !defined(__AVR_ATmega1284P__)\n')
        f.write('    #error Oops!  Make sure you have \'Gen7\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//x axis pins\n')
        f.write('    #define X_STEP_PIN      21                  // different from standard GEN7\n')
        f.write('    #define X_DIR_PIN       20                  // different from standard GEN7\n')
        f.write('    #define X_ENABLE_PIN    24\n')
        f.write('    #define X_STOP_PIN      0\n')
        f.write('\n')
        f.write('    //y axis pins\n')
        f.write('    #define Y_STEP_PIN      23\n')
        f.write('    #define Y_DIR_PIN       22\n')
        f.write('    #define Y_ENABLE_PIN    24\n')
        f.write('    #define Y_STOP_PIN      1\n')
        f.write('\n')
        f.write('    //z axis pins\n')
        f.write('    #define Z_STEP_PIN      26\n')
        f.write('    #define Z_DIR_PIN       25\n')
        f.write('    #define Z_ENABLE_PIN    24\n')
        f.write('    #define Z_STOP_PIN      2\n')
        f.write('\n')
        f.write('    //extruder pins\n')
        f.write('    #define E0_STEP_PIN      28\n')
        f.write('    #define E0_DIR_PIN       27\n')
        f.write('    #define E0_ENABLE_PIN    24\n')
        f.write('\n')
        f.write('    #define TEMP_0_PIN      2\n')
        f.write('    #define TEMP_1_PIN      -1\n')
        f.write('    #define TEMP_2_PIN      -1\n')
        f.write('    #define TEMP_BED_PIN        1   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!! (pin 34 bed)\n')
        f.write('\n')
        f.write('    #define HEATER_0_PIN    4\n')
        f.write('    #define HEATER_1_PIN    -1\n')
        f.write('    #define HEATER_2_PIN    -1\n')
        f.write('    #define HEATER_BED_PIN      3  // (bed)\n')
        f.write('\n')
        f.write('    #define SDPOWER         -1\n')
        f.write('    #define SDSS            31                  // SCL pin of I2C header || CS Pin for SD Card support\n')
        f.write('    #define LED_PIN         -1\n')
        f.write('\n')
        f.write('    #define FAN_PIN         -1\n')
        f.write('    #define PS_ON_PIN       19\n')
        f.write('    //our pin for debugging.\n')
        f.write('\n')
        f.write('    #define DEBUG_PIN        -1\n')
        f.write('\n')
        f.write('    //our RS485 pins\n')
        f.write('    //#define TX_ENABLE_PIN       12\n')
        f.write('    //#define RX_ENABLE_PIN       13\n')
        f.write('\n')
        f.write('    #define BEEPER -1\n')
        f.write('    #define SDCARDDETECT -1\n')
        f.write('    #define SUICIDE_PIN -1    //has to be defined; otherwise Power_off doesn\'t work\n')
        f.write('\n')
        f.write('    #define KILL_PIN -1\n')
        f.write('    //Pins for 4bit LCD Support\n')
        f.write('    #define LCD_PINS_RS 18\n')
        f.write('    #define LCD_PINS_ENABLE 17\n')
        f.write('    #define LCD_PINS_D4 16\n')
        f.write('    #define LCD_PINS_D5 15\n')
        f.write('    #define LCD_PINS_D6 13\n')
        f.write('    #define LCD_PINS_D7 14\n')
        f.write('\n')
        f.write('     //buttons are directly attached\n')
        f.write('    #define BTN_EN1 11\n')
        f.write('    #define BTN_EN2 10\n')
        f.write('    #define BTN_ENC 12  //the click\n')
        f.write('\n')
        f.write('#endif // GEN7_CUSTOM\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Arduino Mega pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if IS_RAMPS || MB(3DRAG) || MB(AZTEEG_X3) || MB(AZTEEG_X3_PRO)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('//////////////////FIX THIS//////////////\n')
        f.write('#ifndef __AVR_ATmega1280__\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('\n')
        f.write('// uncomment one of the following lines for RAMPS v1.3 or v1.0, comment both for v1.2 or 1.1\n')
        f.write('#define RAMPS_V_1_3\n')
        f.write('// #define RAMPS_V_1_0\n')
        f.write('\n')
        f.write('\n')
        f.write('#if (IS_RAMPS && !MB(RAMPS_OLD)) || MB(3DRAG) || MB(AZTEEG_X3) || MB(AZTEEG_X3_PRO)\n')
        f.write('\n')
        f.write('  #define LARGE_FLASH true\n')
        f.write('\n')
        f.write('  #if MB(3DRAG)\n')
        f.write('    #define X_STEP_PIN         54\n')
        f.write('    #define X_DIR_PIN          55\n')
        f.write('    #define X_ENABLE_PIN       38\n')
        f.write('    #define X_MIN_PIN           3\n')
        f.write('    #define X_MAX_PIN           -1   //2 //Max endstops default to disabled "-1", set to commented value to enable.\n')
        f.write('\n')
        f.write('    #define Y_STEP_PIN         60\n')
        f.write('    #define Y_DIR_PIN          61\n')
        f.write('    #define Y_ENABLE_PIN       56\n')
        f.write('    #define Y_MIN_PIN          14\n')
        f.write('    #define Y_MAX_PIN          -1   //15\n')
        f.write('\n')
        f.write('    #define Z_STEP_PIN         46\n')
        f.write('    #define Z_DIR_PIN          48\n')
        f.write('    #define Z_ENABLE_PIN       63\n')
        f.write('    #define Z_MIN_PIN          18\n')
        f.write('    #define Z_MAX_PIN          -1\n')
        f.write('\n')
        f.write('    #define Y2_STEP_PIN        36\n')
        f.write('    #define Y2_DIR_PIN         34\n')
        f.write('    #define Y2_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('    #define Z2_STEP_PIN        36\n')
        f.write('    #define Z2_DIR_PIN         34\n')
        f.write('    #define Z2_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('    #define E0_STEP_PIN        26\n')
        f.write('    #define E0_DIR_PIN         28\n')
        f.write('    #define E0_ENABLE_PIN      24\n')
        f.write('\n')
        f.write('    #define E1_STEP_PIN        36\n')
        f.write('    #define E1_DIR_PIN         34\n')
        f.write('    #define E1_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('    #define SDPOWER            -1\n')
        f.write('    #define SDSS               25//53\n')
        f.write('    #define LED_PIN            13\n')
        f.write('\n')
        f.write('    #define BEEPER             33\n')
        f.write('\n')
        f.write('  #else\n')
        f.write('\n')
        f.write('    #define X_STEP_PIN         54\n')
        f.write('    #define X_DIR_PIN          55\n')
        f.write('    #define X_ENABLE_PIN       38\n')
        f.write('    #define X_MIN_PIN           3\n')
        f.write('    #define X_MAX_PIN           2\n')
        f.write('\n')
        f.write('    #define Y_STEP_PIN         60\n')
        f.write('    #define Y_DIR_PIN          61\n')
        f.write('    #define Y_ENABLE_PIN       56\n')
        f.write('    #define Y_MIN_PIN          14\n')
        f.write('    #define Y_MAX_PIN          15\n')
        f.write('\n')
        f.write('    #define Z_STEP_PIN         46\n')
        f.write('    #define Z_DIR_PIN          48\n')
        f.write('    #define Z_ENABLE_PIN       62\n')
        f.write('    #define Z_MIN_PIN          18\n')
        f.write('    #define Z_MAX_PIN          19\n')
        f.write('\n')
        f.write('    #define Y2_STEP_PIN        36\n')
        f.write('    #define Y2_DIR_PIN         34\n')
        f.write('    #define Y2_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('    #define Z2_STEP_PIN        36\n')
        f.write('    #define Z2_DIR_PIN         34\n')
        f.write('    #define Z2_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('    #define E0_STEP_PIN        26\n')
        f.write('    #define E0_DIR_PIN         28\n')
        f.write('    #define E0_ENABLE_PIN      24\n')
        f.write('\n')
        f.write('    #define E1_STEP_PIN        36\n')
        f.write('    #define E1_DIR_PIN         34\n')
        f.write('    #define E1_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('#if MB(RAMPS_13_EEB)  //FMM added for Filament Extruder\n')
        f.write('#ifdef FILAMENT_SENSOR\n')
        f.write('    //define analog pin for the filament width sensor input\n')
        f.write('    //Use the RAMPS 1.4 Analog input 5 on the AUX2 connector\n')
        f.write('      #define FILWIDTH_PIN        5\n')
        f.write('#endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('\n')
        f.write('    #if MB(AZTEEG_X3_PRO)\n')
        f.write('      #define E2_STEP_PIN        23\n')
        f.write('      #define E2_DIR_PIN         25\n')
        f.write('      #define E2_ENABLE_PIN      40\n')
        f.write('\n')
        f.write('      #define E3_STEP_PIN        27\n')
        f.write('      #define E3_DIR_PIN         29\n')
        f.write('      #define E3_ENABLE_PIN      41\n')
        f.write('\n')
        f.write('      #define E4_STEP_PIN        43\n')
        f.write('      #define E4_DIR_PIN         37\n')
        f.write('      #define E4_ENABLE_PIN      42\n')
        f.write('    #endif\n')
        f.write('\n')
        f.write('    #define SDPOWER            -1\n')
        f.write('    #define SDSS               53\n')
        f.write('    #define LED_PIN            13\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(RAMPS_13_EFB) || MB(RAMPS_13_EFF) || MB(AZTEEG_X3) || MB(AZTEEG_X3_PRO)\n')
        f.write('    #define FAN_PIN            9 // (Sprinter config)\n')
        f.write('  #else\n')
        f.write('    #define FAN_PIN            4 // IO pin. Buffer needed\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(3DRAG) || MB(RAMPS_13_EEF)\n')
        f.write('    #define FAN_PIN            8\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(RAMPS_13_EFF)\n')
        f.write('    #define CONTROLLERFAN_PIN  -1 //Pin used for the fan to cool controller\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #define PS_ON_PIN          12\n')
        f.write('\n')
        f.write('  #if defined(REPRAP_DISCOUNT_SMART_CONTROLLER) || defined(G3D_PANEL)\n')
        f.write('    #define KILL_PIN           41\n')
        f.write('  #else\n')
        f.write('    #define KILL_PIN           -1\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(RAMPS_13_EFF)\n')
        f.write('    #define HEATER_0_PIN       8\n')
        f.write('  #else\n')
        f.write('    #define HEATER_0_PIN       10   // EXTRUDER 1\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(RAMPS_13_EFB) || MB(AZTEEG_X3)\n')
        f.write('    #define HEATER_1_PIN       -1\n')
        f.write('  #else\n')
        f.write('    #define HEATER_1_PIN       9    // EXTRUDER 2 (FAN On Sprinter)\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('\n')
        f.write('  #if MB(3DRAG)\n')
        f.write('    #define HEATER_0_PIN       10\n')
        f.write('    #define HEATER_1_PIN       12\n')
        f.write('    #define HEATER_2_PIN       6\n')
        f.write('  #elif MB(AZTEEG_X3_PRO)\n')
        f.write('    #define HEATER_2_PIN       16\n')
        f.write('    #define HEATER_3_PIN       17\n')
        f.write('    #define HEATER_4_PIN       4\n')
        f.write('    #define HEATER_5_PIN       5\n')
        f.write('    #define HEATER_6_PIN       6\n')
        f.write('    #define HEATER_7_PIN       11\n')
        f.write('  #else\n')
        f.write('    #define HEATER_2_PIN       -1\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #define TEMP_0_PIN         13   // ANALOG NUMBERING\n')
        f.write('  #define TEMP_1_PIN         15   // ANALOG NUMBERING\n')
        f.write('  #if MB(AZTEEG_X3_PRO)\n')
        f.write('    #define TEMP_2_PIN         12   // ANALOG NUMBERING\n')
        f.write('    #define TEMP_3_PIN         11   // ANALOG NUMBERING\n')
        f.write('    #define TEMP_4_PIN         10   // ANALOG NUMBERING\n')
        f.write('    #define TC1                4    // ANALOG NUMBERING Thermo couple on Azteeg X3Pro\n')
        f.write('    #define TC2                5    // ANALOG NUMBERING Thermo couple on Azteeg X3Pro\n')
        f.write('  #else\n')
        f.write('    #define TEMP_2_PIN         -1   // ANALOG NUMBERING\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(RAMPS_13_EFF) || MB(RAMPS_13_EEF)\n')
        f.write('    #define HEATER_BED_PIN     -1    // NO BED\n')
        f.write('  #else\n')
        f.write('    #if MB(3DRAG)\n')
        f.write('      #define HEATER_BED_PIN     9    // BED\n')
        f.write('    #else\n')
        f.write('      #define HEATER_BED_PIN     8    // BED\n')
        f.write('    #endif\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #define TEMP_BED_PIN       14   // ANALOG NUMBERING\n')
        f.write('\n')
        f.write('  #ifdef NUM_SERVOS\n')
        f.write('    #define SERVO0_PIN         11\n')
        f.write('\n')
        f.write('    #if NUM_SERVOS > 1\n')
        f.write('      #define SERVO1_PIN         6\n')
        f.write('    #endif\n')
        f.write('\n')
        f.write('    #if NUM_SERVOS > 2\n')
        f.write('      #define SERVO2_PIN         5\n')
        f.write('    #endif\n')
        f.write('\n')
        f.write('    #if NUM_SERVOS > 3\n')
        f.write('      #define SERVO3_PIN         4\n')
        f.write('    #endif\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if MB(AZTEEG_X3_PRO)\n')
        f.write('    #define BEEPER 33\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #ifdef TEMP_STAT_LEDS\n')
        f.write('    #if MB(AZTEEG_X3)\n')
        f.write('      #define STAT_LED_RED       6\n')
        f.write('      #define STAT_LED_BLUE     11\n')
        f.write('    #endif\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #ifdef ULTRA_LCD\n')
        f.write('\n')
        f.write('    #ifdef NEWPANEL\n')
        f.write('      #define LCD_PINS_RS 16\n')
        f.write('      #define LCD_PINS_ENABLE 17\n')
        f.write('      #define LCD_PINS_D4 23\n')
        f.write('      #define LCD_PINS_D5 25\n')
        f.write('      #define LCD_PINS_D6 27\n')
        f.write('      #define LCD_PINS_D7 29\n')
        f.write('\n')
        f.write('      #ifdef REPRAP_DISCOUNT_SMART_CONTROLLER\n')
        f.write('        #define BEEPER 37\n')
        f.write('\n')
        f.write('        #define BTN_EN1 31\n')
        f.write('        #define BTN_EN2 33\n')
        f.write('        #define BTN_ENC 35\n')
        f.write('\n')
        f.write('        #define SDCARDDETECT 49\n')
        f.write('      #elif defined(LCD_I2C_PANELOLU2)\n')
        f.write('        #define BTN_EN1 47  //reverse if the encoder turns the wrong way.\n')
        f.write('        #define BTN_EN2 43\n')
        f.write('        #define BTN_ENC 32\n')
        f.write('        #define LCD_SDSS 53\n')
        f.write('        #define SDCARDDETECT -1\n')
        f.write('        #define KILL_PIN 41\n')
        f.write('      #elif defined(LCD_I2C_VIKI)\n')
        f.write('        #define BTN_EN1 22  //reverse if the encoder turns the wrong way.\n')
        f.write('        #define BTN_EN2 7\n')
        f.write('        #define BTN_ENC -1\n')
        f.write('        #define LCD_SDSS 53\n')
        f.write('        #define SDCARDDETECT 49\n')
        f.write('      #else\n')
        f.write('        //arduino pin which triggers an piezzo beeper\n')
        f.write('        #define BEEPER 33  // Beeper on AUX-4\n')
        f.write('\n')
        f.write('        //buttons are directly attached using AUX-2\n')
        f.write('        #ifdef REPRAPWORLD_KEYPAD\n')
        f.write('          #define BTN_EN1 64 // encoder\n')
        f.write('          #define BTN_EN2 59 // encoder\n')
        f.write('          #define BTN_ENC 63 // enter button\n')
        f.write('          #define SHIFT_OUT 40 // shift register\n')
        f.write('          #define SHIFT_CLK 44 // shift register\n')
        f.write('          #define SHIFT_LD 42 // shift register\n')
        f.write('        #else\n')
        f.write('          #define BTN_EN1 37\n')
        f.write('          #define BTN_EN2 35\n')
        f.write('          #define BTN_ENC 31  //the click\n')
        f.write('        #endif\n')
        f.write('\n')
        f.write('        #ifdef G3D_PANEL\n')
        f.write('          #define SDCARDDETECT 49\n')
        f.write('        #else\n')
        f.write('          #define SDCARDDETECT -1  // Ramps does not use this port\n')
        f.write('        #endif\n')
        f.write('\n')
        f.write('      #endif\n')
        f.write('\n')
        f.write('      #if MB(3DRAG)\n')
        f.write('        #define BEEPER -1\n')
        f.write('\n')
        f.write('        #define LCD_PINS_RS 27\n')
        f.write('        #define LCD_PINS_ENABLE 29\n')
        f.write('        #define LCD_PINS_D4 37\n')
        f.write('        #define LCD_PINS_D5 35\n')
        f.write('        #define LCD_PINS_D6 33\n')
        f.write('        #define LCD_PINS_D7 31\n')
        f.write('\n')
        f.write('       //buttons\n')
        f.write('       #define BTN_EN1 16\n')
        f.write('       #define BTN_EN2 17\n')
        f.write('       #define BTN_ENC 23 //the click\n')
        f.write('\n')
        f.write('    #endif\n')
        f.write('    #else //old style panel with shift register\n')
        f.write('      //arduino pin witch triggers an piezzo beeper\n')
        f.write('      #define BEEPER 33   //No Beeper added\n')
        f.write('\n')
        f.write('      //buttons are attached to a shift register\n')
        f.write('  // Not wired this yet\n')
        f.write('      //#define SHIFT_CLK 38\n')
        f.write('      //#define SHIFT_LD 42\n')
        f.write('      //#define SHIFT_OUT 40\n')
        f.write('      //#define SHIFT_EN 17\n')
        f.write('\n')
        f.write('      #define LCD_PINS_RS 16\n')
        f.write('      #define LCD_PINS_ENABLE 17\n')
        f.write('      #define LCD_PINS_D4 23\n')
        f.write('      #define LCD_PINS_D5 25\n')
        f.write('      #define LCD_PINS_D6 27\n')
        f.write('      #define LCD_PINS_D7 29\n')
        f.write('    #endif\n')
        f.write('  #endif //ULTRA_LCD\n')
        f.write('\n')
        f.write('#else // RAMPS_V_1_1 or RAMPS_V_1_2 as default (BOARD_RAMPS_OLD)\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         26\n')
        f.write('#define X_DIR_PIN          28\n')
        f.write('#define X_ENABLE_PIN       24\n')
        f.write('#define X_MIN_PIN           3\n')
        f.write('#define X_MAX_PIN          -1    //2\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         38\n')
        f.write('#define Y_DIR_PIN          40\n')
        f.write('#define Y_ENABLE_PIN       36\n')
        f.write('#define Y_MIN_PIN          16\n')
        f.write('#define Y_MAX_PIN          -1    //17\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         44\n')
        f.write('#define Z_DIR_PIN          46\n')
        f.write('#define Z_ENABLE_PIN       42\n')
        f.write('#define Z_MIN_PIN          18\n')
        f.write('#define Z_MAX_PIN          -1    //19\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         32\n')
        f.write('#define E0_DIR_PIN          34\n')
        f.write('#define E0_ENABLE_PIN       30\n')
        f.write('\n')
        f.write('#define SDPOWER            48\n')
        f.write('#define SDSS               53\n')
        f.write('#define LED_PIN            13\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#ifdef RAMPS_V_1_0 // RAMPS_V_1_0\n')
        f.write('  #define HEATER_0_PIN     12    // RAMPS 1.0\n')
        f.write('  #define HEATER_BED_PIN   -1    // RAMPS 1.0\n')
        f.write('  #define FAN_PIN          11    // RAMPS 1.0\n')
        f.write('#else // RAMPS_V_1_1 or RAMPS_V_1_2\n')
        f.write('  #define HEATER_0_PIN     10    // RAMPS 1.1\n')
        f.write('  #define HEATER_BED_PIN    8    // RAMPS 1.1\n')
        f.write('  #define FAN_PIN           9    // RAMPS 1.1\n')
        f.write('#endif\n')
        f.write('#define HEATER_1_PIN        -1\n')
        f.write('#define HEATER_2_PIN        -1\n')
        f.write('#define TEMP_0_PIN          2    // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define TEMP_1_PIN          -1\n')
        f.write('#define TEMP_2_PIN          -1\n')
        f.write('#define TEMP_BED_PIN        1    // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('\n')
        f.write('#endif // RAMPS_13_EFB || RAMPS_13_EEB || RAMPS_13_EFF || 3DRAG\n')
        f.write('\n')
        f.write('// SPI for Max6675 Thermocouple\n')
        f.write('\n')
        f.write('#ifndef SDSUPPORT\n')
        f.write('// these pins are defined in the SD library if building with SD support\n')
        f.write('  #define SCK_PIN          52\n')
        f.write('  #define MISO_PIN         50\n')
        f.write('  #define MOSI_PIN         51\n')
        f.write('  #define MAX6675_SS       66// Do not use pin 53 if there is even the remote possibility of using Dsplay/SD card\n')
        f.write('#else\n')
        f.write('  #define MAX6675_SS       66// Do not use pin 49 as this is tied to the switch inside the SD card socket to detect if there is an SD card present\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#endif // RAMPS_OLD || RAMPS_13_EFB || RAMPS_13_EEB || RAMPS_13_EFF || 3DRAG\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Duemilanove w/ ATMega328P pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(DUEMILANOVE_328P)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega328P__\n')
        f.write('#error Oops!  Make sure you have \'Arduino Duemilanove w/ ATMega328\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         19\n')
        f.write('#define X_DIR_PIN          18\n')
        f.write('#define X_ENABLE_PIN       -1\n')
        f.write('#define X_STOP_PIN         17\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         10\n')
        f.write('#define Y_DIR_PIN           7\n')
        f.write('#define Y_ENABLE_PIN       -1\n')
        f.write('#define Y_STOP_PIN          8\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         13\n')
        f.write('#define Z_DIR_PIN           3\n')
        f.write('#define Z_ENABLE_PIN        2\n')
        f.write('#define Z_STOP_PIN          4\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         11\n')
        f.write('#define E0_DIR_PIN          12\n')
        f.write('#define E0_ENABLE_PIN       -1\n')
        f.write('\n')
        f.write('#define SDPOWER          -1\n')
        f.write('#define SDSS          -1\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define FAN_PIN             5\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN        6\n')
        f.write('#define HEATER_1_PIN        -1\n')
        f.write('#define HEATER_2_PIN        -1\n')
        f.write('#define TEMP_0_PIN          0    // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define TEMP_1_PIN          -1\n')
        f.write('#define TEMP_2_PIN          -1\n')
        f.write('#define HEATER_BED_PIN      -1\n')
        f.write('#define TEMP_BED_PIN        -1\n')
        f.write('\n')
        f.write('#endif // DUEMILANOVE_328P\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Elefu RA Board Pin Assignments\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(ELEFU_3)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         49\n')
        f.write('#define X_DIR_PIN          13\n')
        f.write('#define X_ENABLE_PIN       48\n')
        f.write('#define X_MIN_PIN          35\n')
        f.write('#define X_MAX_PIN          -1 //34\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         11\n')
        f.write('#define Y_DIR_PIN          9\n')
        f.write('#define Y_ENABLE_PIN       12\n')
        f.write('#define Y_MIN_PIN          33\n')
        f.write('#define Y_MAX_PIN          -1 //32\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         7\n')
        f.write('#define Z_DIR_PIN          6\n')
        f.write('#define Z_ENABLE_PIN       8\n')
        f.write('#define Z_MIN_PIN          31\n')
        f.write('#define Z_MAX_PIN          -1 //30\n')
        f.write('\n')
        f.write('#define E2_STEP_PIN        43\n')
        f.write('#define E2_DIR_PIN         47\n')
        f.write('#define E2_ENABLE_PIN      42\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN        18\n')
        f.write('#define E1_DIR_PIN         19\n')
        f.write('#define E1_ENABLE_PIN      38\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN        40\n')
        f.write('#define E0_DIR_PIN         41\n')
        f.write('#define E0_ENABLE_PIN      37\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define LED_PIN            -1 //Use +12V Aux port for LED Ring\n')
        f.write('\n')
        f.write('#define FAN_PIN            16 //5V PWM\n')
        f.write('\n')
        f.write('#define PS_ON_PIN          10 //Set to -1 if using a manual switch on the PWRSW Connector\n')
        f.write('#define SLEEP_WAKE_PIN     26 //This feature still needs work\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       45 //12V PWM1\n')
        f.write('#define HEATER_1_PIN       46 //12V PWM2\n')
        f.write('#define HEATER_2_PIN       17 //12V PWM3\n')
        f.write('#define HEATER_BED_PIN     44 //DOUBLE 12V PWM\n')
        f.write('#define TEMP_0_PIN         3  //ANALOG NUMBERING\n')
        f.write('#define TEMP_1_PIN         2  //ANALOG NUMBERING\n')
        f.write('#define TEMP_2_PIN         1  //ANALOG NUMBERING\n')
        f.write('#define TEMP_BED_PIN       0  //ANALOG NUMBERING\n')
        f.write('\n')
        f.write('#define BEEPER             36\n')
        f.write('\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('// M240  Triggers a camera by emulating a Canon RC-1 Remote\n')
        f.write('// Data from: http://www.doc-diy.net/photo/rc-1_hacked/\n')
        f.write('#define PHOTOGRAPH_PIN     29\n')
        f.write('\n')
        f.write('#ifdef RA_CONTROL_PANEL\n')
        f.write('\n')
        f.write('  #define SDSS             53\n')
        f.write('  #define SDCARDDETECT     28\n')
        f.write('\n')
        f.write('  #define BTN_EN1          14\n')
        f.write('  #define BTN_EN2          39\n')
        f.write('  #define BTN_ENC          15  //the click\n')
        f.write('\n')
        f.write('  #define BLEN_C           2\n')
        f.write('  #define BLEN_B           1\n')
        f.write('  #define BLEN_A           0\n')
        f.write('\n')
        f.write('  //encoder rotation values\n')
        f.write('  #define encrot0          0\n')
        f.write('  #define encrot1          2\n')
        f.write('  #define encrot2          3\n')
        f.write('  #define encrot3          1\n')
        f.write('\n')
        f.write('#endif //RA_CONTROL_PANEL\n')
        f.write('\n')
        f.write('#ifdef RA_DISCO\n')
        f.write('  //variables for which pins the TLC5947 is using\n')
        f.write('  #define TLC_CLOCK_PIN    25\n')
        f.write('  #define TLC_BLANK_PIN    23\n')
        f.write('  #define TLC_XLAT_PIN     22\n')
        f.write('  #define TLC_DATA_PIN     24\n')
        f.write('\n')
        f.write('  //We also need to define pin to port number mapping for the 2560 to match the pins listed above. If you change the TLC pins, update this as well per the 2560 datasheet!\n')
        f.write('  //This currently only works with the RA Board.\n')
        f.write('  #define TLC_CLOCK_BIT 3 //bit 3 on port A\n')
        f.write('  #define TLC_CLOCK_PORT &PORTA //bit 3 on port A\n')
        f.write('\n')
        f.write('  #define TLC_BLANK_BIT 1 //bit 1 on port A\n')
        f.write('  #define TLC_BLANK_PORT &PORTA //bit 1 on port A\n')
        f.write('\n')
        f.write('  #define TLC_DATA_BIT 2 //bit 2 on port A\n')
        f.write('  #define TLC_DATA_PORT &PORTA //bit 2 on port A\n')
        f.write('\n')
        f.write('  #define TLC_XLAT_BIT 0 //bit 0 on port A\n')
        f.write('  #define TLC_XLAT_PORT &PORTA //bit 0 on port A\n')
        f.write('\n')
        f.write('  //change this to match your situation. Lots of TLCs takes up the arduino SRAM very quickly, so be careful\n')
        f.write('  //Leave it at at least 1 if you have enabled RA_LIGHTING\n')
        f.write('  //The number of TLC5947 boards chained together for use with the animation, additional ones will repeat the animation on them, but are not individually addressable and mimic those before them. You can leave the default at 2 even if you only have 1 TLC5947 module.\n')
        f.write('  #define NUM_TLCS 2\n')
        f.write('\n')
        f.write('  //These TRANS_ARRAY values let you change the order the LEDs on the lighting modules will animate for chase functions.\n')
        f.write('  //Modify them according to your specific situation.\n')
        f.write('  //NOTE: the array should be 8 long for every TLC you have. These defaults assume (2) TLCs.\n')
        f.write('  #define TRANS_ARRAY {0, 1, 2, 3, 4, 5, 6, 7, 15, 14, 13, 12, 11, 10, 9, 8} //forwards\n')
        f.write('  //#define TRANS_ARRAY {7, 6, 5, 4, 3, 2, 1, 0, 8, 9, 10, 11, 12, 13, 14, 15} //backwards\n')
        f.write('#endif //RA_LIGHTING\n')
        f.write('\n')
        f.write('\n')
        f.write('#endif // ELEFU_3\n')
        f.write('\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Gen6 pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(GEN6) || MB(GEN6_DELUXE)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega644P__\n')
        f.write('#ifndef __AVR_ATmega1284P__\n')
        f.write('#error Oops!  Make sure you have \'Sanguino\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//x axis pins\n')
        f.write('    #define X_STEP_PIN      15\n')
        f.write('    #define X_DIR_PIN       18\n')
        f.write('    #define X_ENABLE_PIN    19\n')
        f.write('    #define X_STOP_PIN      20\n')
        f.write('\n')
        f.write('    //y axis pins\n')
        f.write('    #define Y_STEP_PIN      23\n')
        f.write('    #define Y_DIR_PIN       22\n')
        f.write('    #define Y_ENABLE_PIN    24\n')
        f.write('    #define Y_STOP_PIN      25\n')
        f.write('\n')
        f.write('    //z axis pins\n')
        f.write('    #define Z_STEP_PIN      27\n')
        f.write('    #define Z_DIR_PIN       28\n')
        f.write('    #define Z_ENABLE_PIN    29\n')
        f.write('    #define Z_STOP_PIN      30\n')
        f.write('\n')
        f.write('    //extruder pins\n')
        f.write('    #define E0_STEP_PIN      4    //Edited @ EJE Electronics 20100715\n')
        f.write('    #define E0_DIR_PIN       2    //Edited @ EJE Electronics 20100715\n')
        f.write('    #define E0_ENABLE_PIN    3    //Added @ EJE Electronics 20100715\n')
        f.write('    #define TEMP_0_PIN      5     //changed @ rkoeppl 20110410\n')
        f.write('    #define TEMP_1_PIN      -1    //changed @ rkoeppl 20110410\n')
        f.write('\n')
        f.write('\n')
        f.write('    #define TEMP_2_PIN      -1    //changed @ rkoeppl 20110410\n')
        f.write('    #define HEATER_0_PIN    14    //changed @ rkoeppl 20110410\n')
        f.write('    #define HEATER_1_PIN    -1\n')
        f.write('    #define HEATER_2_PIN    -1\n')
        f.write('    #if MB(GEN6)\n')
        f.write('    #define HEATER_BED_PIN  -1    //changed @ rkoeppl 20110410\n')
        f.write('    #define TEMP_BED_PIN    -1    //changed @ rkoeppl 20110410\n')
        f.write('    #else\n')
        f.write('    #define HEATER_BED_PIN   1    //changed @ rkoeppl 20110410\n')
        f.write('    #define TEMP_BED_PIN     0    //changed @ rkoeppl 20110410\n')
        f.write('    #endif\n')
        f.write('    #define SDPOWER          -1\n')
        f.write('    #define SDSS          17\n')
        f.write('    #define LED_PIN         -1    //changed @ rkoeppl 20110410\n')
        f.write('    #define FAN_PIN         -1    //changed @ rkoeppl 20110410\n')
        f.write('    #define PS_ON_PIN       -1    //changed @ rkoeppl 20110410\n')
        f.write('    #define KILL_PIN        -1    //changed @ drakelive 20120830\n')
        f.write('    //our pin for debugging.\n')
        f.write('\n')
        f.write('    #define DEBUG_PIN        0\n')
        f.write('\n')
        f.write('    //our RS485 pins\n')
        f.write('    #define TX_ENABLE_PIN 12\n')
        f.write('    #define RX_ENABLE_PIN 13\n')
        f.write('\n')
        f.write('#endif // GEN6 || GEN6_DELUXE\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Sanguinololu pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(STB_11)\n')
        f.write('#define STB\n')
        f.write('#endif\n')
        f.write('#if MB(MELZI) || MB(MELZI_1284)\n')
        f.write('#define MELZI\n')
        f.write('#endif\n')
        f.write('#if MB(AZTEEG_X1)\n')
        f.write('#define AZTEEG_X1\n')
        f.write('#endif\n')
        f.write('#if MB(SANGUINOLOLU_12) || MB(MELZI) || MB(STB_11) || MB(AZTEEG_X1) || MB(MELZI_1284)\n')
        f.write('#undef MOTHERBOARD\n')
        f.write('#define MOTHERBOARD BOARD_SANGUINOLOLU_11\n')
        f.write('#define SANGUINOLOLU_V_1_2\n')
        f.write('\n')
        f.write('#if defined(__AVR_ATmega1284P__)\n')
        f.write('  #define LARGE_FLASH true\n')
        f.write('#endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#if MB(SANGUINOLOLU_11)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#ifndef __AVR_ATmega644P__\n')
        f.write('#ifndef __AVR_ATmega1284P__\n')
        f.write('#error Oops!  Make sure you have \'Sanguino\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         15\n')
        f.write('#define X_DIR_PIN          21\n')
        f.write('#define X_STOP_PIN         18\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         22\n')
        f.write('#define Y_DIR_PIN          23\n')
        f.write('#define Y_STOP_PIN         19\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         3\n')
        f.write('#define Z_DIR_PIN          2\n')
        f.write('#define Z_STOP_PIN         20\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         1\n')
        f.write('#define E0_DIR_PIN          0\n')
        f.write('\n')
        f.write('#define LED_PIN            -1\n')
        f.write('\n')
        f.write('#define FAN_PIN            -1\n')
        f.write(' #if FAN_PIN == 12 || FAN_PIN ==13\n')
        f.write('  #define FAN_SOFT_PWM\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef MELZI\n')
        f.write(' #define LED_PIN            27 /* On some broken versions of the Sanguino libraries the pin definitions are wrong, which then needs LED_PIN as pin 28. But you better upgrade your Sanguino libraries! See #368. */\n')
        f.write(' #define FAN_PIN            4 // Works for Panelolu2 too\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef STB\n')
        f.write(' #define FAN_PIN            4\n')
        f.write('  //  Uncomment this if you have the first generation (V1.10) of STBs board\n')
        f.write(' #define LCD_PIN_BL         17 // LCD backlight LED\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef AZTEEG_X1\n')
        f.write(' #define FAN_PIN            4\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef NUM_SERVOS\n')
        f.write('  #define SERVO0_PIN          -1\n')
        f.write('\n')
        f.write('  #if NUM_SERVOS > 1\n')
        f.write('    #define SERVO1_PIN        -1\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if NUM_SERVOS > 2\n')
        f.write('    #define SERVO2_PIN        -1\n')
        f.write('  #endif\n')
        f.write('\n')
        f.write('  #if NUM_SERVOS > 3\n')
        f.write('    #define SERVO3_PIN        -1\n')
        f.write('  #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       13 // (extruder)\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('\n')
        f.write('#ifdef SANGUINOLOLU_V_1_2\n')
        f.write('\n')
        f.write(' #define HEATER_BED_PIN     12 // (bed)\n')
        f.write(' #define X_ENABLE_PIN       14\n')
        f.write(' #define Y_ENABLE_PIN       14\n')
        f.write(' #define Z_ENABLE_PIN       26\n')
        f.write(' #define E0_ENABLE_PIN      14\n')
        f.write('\n')
        f.write(' #ifdef LCD_I2C_PANELOLU2\n')
        f.write('   #define FAN_PIN          4 // Uses Transistor1 (PWM) on Panelolu2\'s Sanguino Adapter Board to drive the fan\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write('#else\n')
        f.write('\n')
        f.write('#define HEATER_BED_PIN      14  // (bed)\n')
        f.write('#define X_ENABLE_PIN       -1\n')
        f.write('#define Y_ENABLE_PIN       -1\n')
        f.write('#define Z_ENABLE_PIN       -1\n')
        f.write('#define E0_ENABLE_PIN      -1\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN          7   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!! (pin 33 extruder)\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('#define TEMP_BED_PIN        6   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!! (pin 34 bed)\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               31\n')
        f.write('\n')
        f.write('/* On some broken versions of the Sanguino libraries the pin definitions are wrong, which then needs SDSS as pin 24. But you better upgrade your Sanguino libraries! See #368. */\n')
        f.write('//#define SDSS               24\n')
        f.write('\n')
        f.write(' #ifdef ULTRA_LCD\n')
        f.write('   #ifdef NEWPANEL\n')
        f.write('     //we have no buzzer installed\n')
        f.write('     #define BEEPER -1\n')
        f.write('     //LCD Pins\n')
        f.write('     #ifdef DOGLCD\n')
        f.write('       // Pins for DOGM SPI LCD Support\n')
        f.write('       #define DOGLCD_A0  30\n')
        f.write('       #define DOGLCD_CS  29\n')
        f.write('       // GLCD features\n')
        f.write('       #define LCD_CONTRAST 1\n')
        f.write('       // Uncomment screen orientation\n')
        f.write('         // #define LCD_SCREEN_ROT_0\n')
        f.write('         // #define LCD_SCREEN_ROT_90\n')
        f.write('       #define LCD_SCREEN_ROT_180\n')
        f.write('         // #define LCD_SCREEN_ROT_270\n')
        f.write('       #else // standard Hitachi LCD controller\n')
        f.write('       #define LCD_PINS_RS        4\n')
        f.write('       #define LCD_PINS_ENABLE    17\n')
        f.write('       #define LCD_PINS_D4        30\n')
        f.write('       #define LCD_PINS_D5        29\n')
        f.write('       #define LCD_PINS_D6        28\n')
        f.write('       #define LCD_PINS_D7        27\n')
        f.write('     #endif\n')
        f.write('     //The encoder and click button\n')
        f.write('     #define BTN_EN1 11\n')
        f.write('     #define BTN_EN2 10\n')
        f.write('     #ifdef LCD_I2C_PANELOLU2\n')
        f.write('       #ifdef MELZI\n')
        f.write('         #define BTN_ENC 29 //the click switch\n')
        f.write('         #define LCD_SDSS 30 //to use the SD card reader on the Panelolu2 rather than the melzi board\n')
        f.write('       #else\n')
        f.write('         #define BTN_ENC 30 //the click switch\n')
        f.write('       #endif\n')
        f.write('     #else\n')
        f.write('       #define BTN_ENC 16  //the click switch\n')
        f.write('     #endif //Panelolu2\n')
        f.write('     //not connected to a pin\n')
        f.write('     #define SDCARDDETECT -1\n')
        f.write('\n')
        f.write('   #endif //Newpanel\n')
        f.write(' #endif //Ultipanel\n')
        f.write('\n')
        f.write(' #ifdef MAKRPANEL\n')
        f.write('     #define BEEPER 29\n')
        f.write('     // Pins for DOGM SPI LCD Support\n')
        f.write('     #define DOGLCD_A0  30\n')
        f.write('     #define DOGLCD_CS  17\n')
        f.write('     #define LCD_PIN_BL 28  // backlight LED on PA3\n')
        f.write('     // GLCD features\n')
        f.write('     #define LCD_CONTRAST 1\n')
        f.write('     // Uncomment screen orientation\n')
        f.write('     #define LCD_SCREEN_ROT_0\n')
        f.write('       // #define LCD_SCREEN_ROT_90\n')
        f.write('       // #define LCD_SCREEN_ROT_180\n')
        f.write('       // #define LCD_SCREEN_ROT_270\n')
        f.write('     //The encoder and click button\n')
        f.write('     #define BTN_EN1 11\n')
        f.write('     #define BTN_EN2 10\n')
        f.write('     #define BTN_ENC 16  //the click switch\n')
        f.write('     //not connected to a pin\n')
        f.write('     #define SDCARDDETECT -1\n')
        f.write(' #endif //Makrpanel\n')
        f.write('\n')
        f.write('#endif // SANGUINOLOLU_11\n')
        f.write('\n')
        f.write('\n')
        f.write('/*****************************************************************\n')
        f.write('* Ultimaker pin assignment\n')
        f.write('******************************************************************/\n')
        f.write('\n')
        f.write('#if MB(ULTIMAKER)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega1280__\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH true\n')
        f.write('\n')
        f.write('#define X_STEP_PIN 25\n')
        f.write('#define X_DIR_PIN 23\n')
        f.write('#define X_MIN_PIN 22\n')
        f.write('#define X_MAX_PIN 24\n')
        f.write('#define X_ENABLE_PIN 27\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN 31\n')
        f.write('#define Y_DIR_PIN 33\n')
        f.write('#define Y_MIN_PIN 26\n')
        f.write('#define Y_MAX_PIN 28\n')
        f.write('#define Y_ENABLE_PIN 29\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN 37\n')
        f.write('#define Z_DIR_PIN 39\n')
        f.write('#define Z_MIN_PIN 30\n')
        f.write('#define Z_MAX_PIN 32\n')
        f.write('#define Z_ENABLE_PIN 35\n')
        f.write('\n')
        f.write('#define HEATER_BED_PIN 4\n')
        f.write('#define TEMP_BED_PIN 10\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN  2\n')
        f.write('#define TEMP_0_PIN 8\n')
        f.write('\n')
        f.write('#define HEATER_1_PIN 3\n')
        f.write('#define TEMP_1_PIN 9\n')
        f.write('\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         43\n')
        f.write('#define E0_DIR_PIN          45\n')
        f.write('#define E0_ENABLE_PIN       41\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         49\n')
        f.write('#define E1_DIR_PIN          47\n')
        f.write('#define E1_ENABLE_PIN       48\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               53\n')
        f.write('#define LED_PIN            13\n')
        f.write('#define FAN_PIN            7\n')
        f.write('#define PS_ON_PIN          12\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define SUICIDE_PIN        54  //PIN that has to be turned on right after start, to keep power flowing.\n')
        f.write('#define SERVO0_PIN         13  // untested\n')
        f.write('\n')
        f.write('#ifdef ULTRA_LCD\n')
        f.write('\n')
        f.write('  #ifdef NEWPANEL\n')
        f.write('  //arduino pin witch triggers an piezzo beeper\n')
        f.write('    #define BEEPER 18\n')
        f.write('\n')
        f.write('    #define LCD_PINS_RS 20\n')
        f.write('    #define LCD_PINS_ENABLE 17\n')
        f.write('    #define LCD_PINS_D4 16\n')
        f.write('    #define LCD_PINS_D5 21\n')
        f.write('    #define LCD_PINS_D6 5\n')
        f.write('    #define LCD_PINS_D7 6\n')
        f.write('\n')
        f.write('    //buttons are directly attached\n')
        f.write('    #define BTN_EN1 40\n')
        f.write('    #define BTN_EN2 42\n')
        f.write('    #define BTN_ENC 19  //the click\n')
        f.write('\n')
        f.write('    #define SDCARDDETECT 38\n')
        f.write('\n')
        f.write('  #else //old style panel with shift register\n')
        f.write('    //arduino pin witch triggers an piezzo beeper\n')
        f.write('    #define BEEPER 18\n')
        f.write('\n')
        f.write('    //buttons are attached to a shift register\n')
        f.write('    #define SHIFT_CLK 38\n')
        f.write('    #define SHIFT_LD 42\n')
        f.write('    #define SHIFT_OUT 40\n')
        f.write('    #define SHIFT_EN 17\n')
        f.write('\n')
        f.write('    #define LCD_PINS_RS 16\n')
        f.write('    #define LCD_PINS_ENABLE 5\n')
        f.write('    #define LCD_PINS_D4 6\n')
        f.write('    #define LCD_PINS_D5 21\n')
        f.write('    #define LCD_PINS_D6 20\n')
        f.write('    #define LCD_PINS_D7 19\n')
        f.write('\n')
        f.write('    #define SDCARDDETECT -1\n')
        f.write('  #endif\n')
        f.write('#endif //ULTRA_LCD\n')
        f.write('\n')
        f.write('#endif // ULTIMAKER\n')
        f.write('\n')
        f.write('#if MB(ULTIMAKER_OLD)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('/*****************************************************************\n')
        f.write('* Ultimaker pin assignment (Old electronics)\n')
        f.write('******************************************************************/\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega1280__\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH true\n')
        f.write('\n')
        f.write('#define X_STEP_PIN 25\n')
        f.write('#define X_DIR_PIN 23\n')
        f.write('#define X_MIN_PIN 15\n')
        f.write('#define X_MAX_PIN 14\n')
        f.write('#define X_ENABLE_PIN 27\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN 31\n')
        f.write('#define Y_DIR_PIN 33\n')
        f.write('#define Y_MIN_PIN 17\n')
        f.write('#define Y_MAX_PIN 16\n')
        f.write('#define Y_ENABLE_PIN 29\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN 37\n')
        f.write('#define Z_DIR_PIN 39\n')
        f.write('#define Z_MIN_PIN 19\n')
        f.write('#define Z_MAX_PIN 18\n')
        f.write('#define Z_ENABLE_PIN 35\n')
        f.write('\n')
        f.write('#define HEATER_BED_PIN -1\n')
        f.write('#define TEMP_BED_PIN -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN  2\n')
        f.write('#define TEMP_0_PIN 8\n')
        f.write('\n')
        f.write('#define HEATER_1_PIN 1\n')
        f.write('#define TEMP_1_PIN 1\n')
        f.write('\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         43\n')
        f.write('#define E0_DIR_PIN          45\n')
        f.write('#define E0_ENABLE_PIN       41\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         -1\n')
        f.write('#define E1_DIR_PIN          -1\n')
        f.write('#define E1_ENABLE_PIN       -1\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               -1\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define FAN_PIN            -1\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define SUICIDE_PIN        -1  //PIN that has to be turned on right after start, to keep power flowing.\n')
        f.write('\n')
        f.write('#define LCD_PINS_RS 24\n')
        f.write('#define LCD_PINS_ENABLE 22\n')
        f.write('#define LCD_PINS_D4 36\n')
        f.write('#define LCD_PINS_D5 34\n')
        f.write('#define LCD_PINS_D6 32\n')
        f.write('#define LCD_PINS_D7 30\n')
        f.write('\n')
        f.write('#endif // ULTIMAKER_OLD\n')
        f.write('\n')
        f.write('#if MB(ULTIMAIN_2)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('/*****************************************************************\n')
        f.write('* Ultiboard v2.0 pin assignment\n')
        f.write('******************************************************************/\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega 2560\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN 25\n')
        f.write('#define X_DIR_PIN 23\n')
        f.write('#define X_STOP_PIN 22\n')
        f.write('#define X_ENABLE_PIN 27\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN 32\n')
        f.write('#define Y_DIR_PIN 33\n')
        f.write('#define Y_STOP_PIN 26\n')
        f.write('#define Y_ENABLE_PIN 31\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN 35\n')
        f.write('#define Z_DIR_PIN 36\n')
        f.write('#define Z_STOP_PIN 29\n')
        f.write('#define Z_ENABLE_PIN 34\n')
        f.write('\n')
        f.write('#define HEATER_BED_PIN 4\n')
        f.write('#define TEMP_BED_PIN 10\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN  2\n')
        f.write('#define TEMP_0_PIN 8\n')
        f.write('\n')
        f.write('#define HEATER_1_PIN 3\n')
        f.write('#define TEMP_1_PIN 9\n')
        f.write('\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         42\n')
        f.write('#define E0_DIR_PIN          43\n')
        f.write('#define E0_ENABLE_PIN       37\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         49\n')
        f.write('#define E1_DIR_PIN          47\n')
        f.write('#define E1_ENABLE_PIN       48\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               53\n')
        f.write('#define LED_PIN            8\n')
        f.write('#define FAN_PIN            7\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define SUICIDE_PIN        -1  //PIN that has to be turned on right after start, to keep power flowing.\n')
        f.write('#define SAFETY_TRIGGERED_PIN     28 //PIN to detect the safety circuit has triggered\n')
        f.write('#define MAIN_VOLTAGE_MEASURE_PIN 14 //Analogue PIN to measure the main voltage, with a 100k - 4k7 resitor divider.\n')
        f.write('\n')
        f.write('#define MOTOR_CURRENT_PWM_XY_PIN 44\n')
        f.write('#define MOTOR_CURRENT_PWM_Z_PIN 45\n')
        f.write('#define MOTOR_CURRENT_PWM_E_PIN 46\n')
        f.write('//Motor current PWM conversion, PWM value = MotorCurrentSetting * 255 / range\n')
        f.write('#define MOTOR_CURRENT_PWM_RANGE 2000\n')
        f.write('#define DEFAULT_PWM_MOTOR_CURRENT  {1300, 1300, 1250}\n')
        f.write('\n')
        f.write('//arduino pin witch triggers an piezzo beeper\n')
        f.write('#define BEEPER 18\n')
        f.write('\n')
        f.write('#define LCD_PINS_RS 20\n')
        f.write('#define LCD_PINS_ENABLE 15\n')
        f.write('#define LCD_PINS_D4 14\n')
        f.write('#define LCD_PINS_D5 21\n')
        f.write('#define LCD_PINS_D6 5\n')
        f.write('#define LCD_PINS_D7 6\n')
        f.write('\n')
        f.write('//buttons are directly attached\n')
        f.write('#define BTN_EN1 40\n')
        f.write('#define BTN_EN2 41\n')
        f.write('#define BTN_ENC 19  //the click\n')
        f.write('\n')
        f.write('#define BLEN_C 2\n')
        f.write('#define BLEN_B 1\n')
        f.write('#define BLEN_A 0\n')
        f.write('\n')
        f.write('#define SDCARDDETECT 39\n')
        f.write('\n')
        f.write('#endif // ULTIMAIN_2\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* RUMBA pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(RUMBA)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         17\n')
        f.write('#define X_DIR_PIN          16\n')
        f.write('#define X_ENABLE_PIN       48\n')
        f.write('#define X_MIN_PIN          37\n')
        f.write('#define X_MAX_PIN          36\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         54\n')
        f.write('#define Y_DIR_PIN          47\n')
        f.write('#define Y_ENABLE_PIN       55\n')
        f.write('#define Y_MIN_PIN          35\n')
        f.write('#define Y_MAX_PIN          34\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         57\n')
        f.write('#define Z_DIR_PIN          56\n')
        f.write('#define Z_ENABLE_PIN       62\n')
        f.write('#define Z_MIN_PIN          33\n')
        f.write('#define Z_MAX_PIN          32\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN        23\n')
        f.write('#define E0_DIR_PIN         22\n')
        f.write('#define E0_ENABLE_PIN      24\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN        26\n')
        f.write('#define E1_DIR_PIN         25\n')
        f.write('#define E1_ENABLE_PIN      27\n')
        f.write('\n')
        f.write('#define E2_STEP_PIN        29\n')
        f.write('#define E2_DIR_PIN         28\n')
        f.write('#define E2_ENABLE_PIN      39\n')
        f.write('\n')
        f.write('#define LED_PIN            13\n')
        f.write('\n')
        f.write('#define FAN_PIN            7\n')
        f.write('//additional FAN1 PIN (e.g. useful for electronics fan or light on/off) on PIN 8\n')
        f.write('\n')
        f.write('#define PS_ON_PIN          45\n')
        f.write('#define KILL_PIN           46\n')
        f.write('\n')
        f.write('#if (TEMP_SENSOR_0==0)\n')
        f.write(' #define TEMP_0_PIN         -1\n')
        f.write(' #define HEATER_0_PIN       -1\n')
        f.write('#else\n')
        f.write(' #define HEATER_0_PIN        2    // EXTRUDER 1\n')
        f.write(' #if (TEMP_SENSOR_0==-1)\n')
        f.write('  #define TEMP_0_PIN         6    // ANALOG NUMBERING - connector *K1* on RUMBA thermocouple ADD ON is used\n')
        f.write(' #else\n')
        f.write('  #define TEMP_0_PIN         15   // ANALOG NUMBERING - default connector for thermistor *T0* on rumba board is used\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#if (TEMP_SENSOR_1==0)\n')
        f.write(' #define TEMP_1_PIN         -1\n')
        f.write(' #define HEATER_1_PIN       -1\n')
        f.write('#else\n')
        f.write(' #define HEATER_1_PIN        3    // EXTRUDER 2\n')
        f.write(' #if (TEMP_SENSOR_1==-1)\n')
        f.write('  #define TEMP_1_PIN         5    // ANALOG NUMBERING - connector *K2* on RUMBA thermocouple ADD ON is used\n')
        f.write(' #else\n')
        f.write('  #define TEMP_1_PIN         14   // ANALOG NUMBERING - default connector for thermistor *T1* on rumba board is used\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#if (TEMP_SENSOR_2==0)\n')
        f.write(' #define TEMP_2_PIN         -1\n')
        f.write(' #define HEATER_2_PIN       -1\n')
        f.write('#else\n')
        f.write(' #define HEATER_2_PIN        6    // EXTRUDER 3\n')
        f.write(' #if (TEMP_SENSOR_2==-1)\n')
        f.write('  #define TEMP_2_PIN         7    // ANALOG NUMBERING - connector *K3* on RUMBA thermocouple ADD ON is used <-- this can not be used when TEMP_SENSOR_BED is defined as thermocouple\n')
        f.write(' #else\n')
        f.write('  #define TEMP_2_PIN         13   // ANALOG NUMBERING - default connector for thermistor *T2* on rumba board is used\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//optional for extruder 4 or chamber: #define TEMP_X_PIN         12   // ANALOG NUMBERING - default connector for thermistor *T3* on rumba board is used\n')
        f.write('//optional FAN1 can be used as 4th heater output: #define HEATER_3_PIN       8    // EXTRUDER 4\n')
        f.write('\n')
        f.write('#if (TEMP_SENSOR_BED==0)\n')
        f.write(' #define TEMP_BED_PIN       -1\n')
        f.write(' #define HEATER_BED_PIN     -1\n')
        f.write('#else\n')
        f.write(' #define HEATER_BED_PIN      9    // BED\n')
        f.write(' #if (TEMP_SENSOR_BED==-1)\n')
        f.write('  #define TEMP_BED_PIN       7    // ANALOG NUMBERING - connector *K3* on RUMBA thermocouple ADD ON is used <-- this can not be used when TEMP_SENSOR_2 is defined as thermocouple\n')
        f.write(' #else\n')
        f.write('  #define TEMP_BED_PIN       11   // ANALOG NUMBERING - default connector for thermistor *THB* on rumba board is used\n')
        f.write(' #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               53\n')
        f.write('#define SDCARDDETECT       49\n')
        f.write('#define BEEPER             44\n')
        f.write('#define LCD_PINS_RS        19\n')
        f.write('#define LCD_PINS_ENABLE    42\n')
        f.write('#define LCD_PINS_D4        18\n')
        f.write('#define LCD_PINS_D5        38\n')
        f.write('#define LCD_PINS_D6        41\n')
        f.write('#define LCD_PINS_D7        40\n')
        f.write('#define BTN_EN1            11\n')
        f.write('#define BTN_EN2            12\n')
        f.write('#define BTN_ENC            43\n')
        f.write('\n')
        f.write('#endif // RUMBA\n')
        f.write('\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Teensylu 0.7 / Printrboard pin assignments (AT90USB1286)\n')
        f.write('* Requires the Teensyduino software with Teensy++ 2.0 selected in Arduino IDE!\n')
        f.write('  http://www.pjrc.com/teensy/teensyduino.html\n')
        f.write('* See http://reprap.org/wiki/Printrboard for more info\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(TEENSYLU) || MB(PRINTRBOARD)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#define AT90USB 1286  // Disable MarlinSerial etc.\n')
        f.write('\n')
        f.write('#ifndef __AVR_AT90USB1286__\n')
        f.write('#error Oops!  Make sure you have \'Teensy++ 2.0\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef AT90USBxx_TEENSYPP_ASSIGNMENTS  // use Teensyduino Teensy++2.0 pin assignments instead of Marlin traditional.\n')
        f.write('#error These Teensylu/Printrboard assignments depend on traditional Marlin assignments, not AT90USBxx_TEENSYPP_ASSIGNMENTS in fastio.h\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH        true\n')
        f.write('\n')
        f.write('#define X_STEP_PIN          0\n')
        f.write('#define X_DIR_PIN           1\n')
        f.write('#define X_ENABLE_PIN       39\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN          2\n')
        f.write('#define Y_DIR_PIN           3\n')
        f.write('#define Y_ENABLE_PIN       38\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN          4\n')
        f.write('#define Z_DIR_PIN           5\n')
        f.write('#define Z_ENABLE_PIN       23\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         6\n')
        f.write('#define E0_DIR_PIN          7\n')
        f.write('#define E0_ENABLE_PIN      19\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       21  // Extruder\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define HEATER_BED_PIN     20  // Bed\n')
        f.write('#define FAN_PIN            22  // Fan\n')
        f.write('// You may need to change FAN_PIN to 16 because Marlin isn\'t using fastio.h\n')
        f.write('// for the fan and Teensyduino uses a different pin mapping.\n')
        f.write('\n')
        f.write('#if MB(TEENSYLU)  // Teensylu\n')
        f.write('  #define X_STOP_PIN         13\n')
        f.write('  #define Y_STOP_PIN         14\n')
        f.write('  #define Z_STOP_PIN         15\n')
        f.write('  #define TEMP_0_PIN          7  // Extruder / Analog pin numbering\n')
        f.write('  #define TEMP_BED_PIN        6  // Bed / Analog pin numbering\n')
        f.write('#else  // Printrboard\n')
        f.write('  #define X_STOP_PIN         35\n')
        f.write('  #define Y_STOP_PIN          8\n')
        f.write('  #define Z_STOP_PIN         36\n')
        f.write('  #define TEMP_0_PIN          1  // Extruder / Analog pin numbering\n')
        f.write('  #define TEMP_BED_PIN        0  // Bed / Analog pin numbering\n')
        f.write('  #ifdef FILAMENT_SENSOR\n')
        f.write('   #define FILWIDTH_PIN        2\n')
        f.write('  #endif //FILAMENT_SENSOR\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS                8\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define ALARM_PIN          -1\n')
        f.write('\n')
        f.write('#ifndef SDSUPPORT\n')
        f.write('// these pins are defined in the SD library if building with SD support\n')
        f.write('  #define SCK_PIN           9\n')
        f.write('  #define MISO_PIN         11\n')
        f.write('  #define MOSI_PIN         10\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#endif // TEENSYLU || PRINTRBOARD\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write(' * Brainwave 1.0 pin assignments (AT90USB646)\n')
        f.write(' * Requires hardware bundle for Arduino:\n')
        f.write('   https://github.com/unrepentantgeek/brainwave-arduino\n')
        f.write(' ****************************************************************************************/\n')
        f.write('#if MB(BRAINWAVE)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#define AT90USB 646  // Disable MarlinSerial etc.\n')
        f.write('\n')
        f.write('#ifndef __AVR_AT90USB646__\n')
        f.write('#error Oops!  Make sure you have \'Brainwave\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         27\n')
        f.write('#define X_DIR_PIN          29\n')
        f.write('#define X_ENABLE_PIN       28\n')
        f.write('#define X_STOP_PIN          7\n')
        f.write('#define X_ATT_PIN          26\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         31\n')
        f.write('#define Y_DIR_PIN          33\n')
        f.write('#define Y_ENABLE_PIN       32\n')
        f.write('#define Y_STOP_PIN          6\n')
        f.write('#define Y_ATT_PIN          30\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         17\n')
        f.write('#define Z_DIR_PIN          19\n')
        f.write('#define Z_ENABLE_PIN       18\n')
        f.write('#define Z_STOP_PIN          5\n')
        f.write('#define Z_ATT_PIN          16\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN        21\n')
        f.write('#define E0_DIR_PIN         23\n')
        f.write('#define E0_ENABLE_PIN      22\n')
        f.write('#define E0_ATT_PIN         20\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN        4  // Extruder\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define HEATER_BED_PIN     38  // Bed\n')
        f.write('#define FAN_PIN             3  // Fan\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN          7  // Extruder / Analog pin numbering\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('#define TEMP_BED_PIN        6  // Bed / Analog pin numbering\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               -1\n')
        f.write('#define LED_PIN            39\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define ALARM_PIN          -1\n')
        f.write('\n')
        f.write('#ifndef SDSUPPORT\n')
        f.write('// these pins are defined in the SD library if building with SD support\n')
        f.write('  #define SCK_PIN           9\n')
        f.write('  #define MISO_PIN         11\n')
        f.write('  #define MOSI_PIN         10\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#endif // BRAINWAVE\n')
        f.write('\n')
        f.write('//\n')
        f.write('// SAV Mk-I\n')
        f.write('// -----------------------------------------------------------------------------------\n')
        f.write('/****************************************************************************************\n')
        f.write('* SAV MkI pin assignments (AT90USB1286)\n')
        f.write('* Requires the Teensyduino software with Teensy++ 2.0 selected in Arduino IDE!\n')
        f.write('  http://www.pjrc.com/teensy/teensyduino.html\n')
        f.write('   RepRap Clone Wars project board.\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(SAV_MKI)  // SAV Mk-I\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#define AT90USB 1286  // Disable MarlinSerial etc.\n')
        f.write('\n')
        f.write('#ifndef __AVR_AT90USB1286__\n')
        f.write('#error Oops!  Make sure you have \'Teensy++ 2.0\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH        true\n')
        f.write('\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         0\n')
        f.write('#define X_DIR_PIN          1\n')
        f.write('#define X_ENABLE_PIN       39\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         2\n')
        f.write('#define Y_DIR_PIN          3\n')
        f.write('#define Y_ENABLE_PIN       38\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         4\n')
        f.write('#define Z_DIR_PIN          5\n')
        f.write('#define Z_ENABLE_PIN       23\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         6\n')
        f.write('#define E0_DIR_PIN          7\n')
        f.write('#define E0_ENABLE_PIN       19\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       21  // Extruder\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define HEATER_BED_PIN     20  // Bed\n')
        f.write('#define FAN_PIN            16  // Fan   -- from Teensyduino environment.\n')
        f.write('                               // For the fan and Teensyduino uses a different pin mapping.\n')
        f.write('\n')
        f.write('  #define X_STOP_PIN         13\n')
        f.write('  #define Y_STOP_PIN         14\n')
        f.write('  #define Z_STOP_PIN         15\n')
        f.write('//  #define Z_STOP_PIN         36  // For inductive sensor.\n')
        f.write('\n')
        f.write('  #define TEMP_0_PIN          7  // Extruder / Analog pin numbering\n')
        f.write('  #define TEMP_BED_PIN        6  // Bed / Analog pin numbering\n')
        f.write('\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               20  // PB0 - 8 in marlin env.\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define ALARM_PIN          -1\n')
        f.write('#define SDCARDDETECT       -1\n')
        f.write('\n')
        f.write('\n')
        f.write('#ifndef SDSUPPORT\n')
        f.write('   // these pins are defined in the SD library if building with SD support\n')
        f.write('  #define SCK_PIN          9\n')
        f.write('  #define MISO_PIN         11\n')
        f.write('  #define MOSI_PIN         10\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define BEEPER             -1\n')
        f.write('#define LCD_PINS_RS        -1\n')
        f.write('#define LCD_PINS_ENABLE    -1\n')
        f.write('#define LCD_PINS_D4        -1\n')
        f.write('#define LCD_PINS_D5        -1\n')
        f.write('#define LCD_PINS_D6        -1\n')
        f.write('#define LCD_PINS_D7        -1\n')
        f.write('\n')
        f.write('#ifdef SAV_3DLCD\n')
        f.write('// For LCD SHIFT register LCD\n')
        f.write('#define SR_DATA_PIN         1\n')
        f.write('#define SR_CLK_PIN          0\n')
        f.write('\n')
        f.write('#define BTN_EN1            41\n')
        f.write('#define BTN_EN2            40\n')
        f.write('#define BTN_ENC            12\n')
        f.write('\n')
        f.write('#define KILL_PIN           42 // A2 = 42 - teensy = 40\n')
        f.write('#define HOME_PIN          -1 // A4 = marlin 44 - teensy = 42\n')
        f.write('\n')
        f.write('#ifdef NUM_SERVOS\n')
        f.write('  #define SERVO0_PIN       41 // In teensy\'s pin definition for pinMode (in Servo.cpp)\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#endif // SAV_MKI\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Teensy++ 2.0 Breadboard pin assignments (AT90USB1286)\n')
        f.write('* Requires the Teensyduino software with Teensy++ 2.0 selected in Arduino IDE!\n')
        f.write('  http://www.pjrc.com/teensy/teensyduino.html\n')
        f.write('* See http://reprap.org/wiki/Printrboard for more info\n')
        f.write('* CLI build: DEFINES=AT90USBxx_TEENSYPP_ASSIGNMENTS HARDWARE_MOTHERBOARD=84  make\n')
        f.write('* \n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(TEENSY2)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#define AT90USB 1286  // Disable MarlinSerial etc.\n')
        f.write('\n')
        f.write('#ifndef __AVR_AT90USB1286__\n')
        f.write('#error Oops!  Make sure you have \'Teensy++ 2.0\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH        true\n')
        f.write('\n')
        f.write('/* \n')
        f.write('DaveX plan for Teensylu/printrboard-type pinouts (ref teensylu & sprinter) for a TeensyBreadboard:\n')
        f.write('\n')
        f.write('                               USB\n')
        f.write('           GND       GND |-----#####-----| +5V              ATX +5SB\n')
        f.write('     ATX PS_ON    PWM 27 |b7   #####   b6| 26    PWM*       Stepper Enable \n')
        f.write('                  PWM  0 |d0           b5| 25    PWM*        \n')
        f.write('                  PWM  1 |d1           b4| 24    PWM        \n')
        f.write('         X_MIN         2 |d2           b3| 23               MISO_PIN\n')
        f.write('         Y_MIN         3 |d3           b2| 22               MOSI_PIN\n')
        f.write('         Z_MIN         4 |d4  * *      b1| 21               SCK_PIN       \n')
        f.write('                       5 |d5  e e      b0| 20               SDSS              \n')
        f.write('                LED    6 |d6  5 4      e7| 19               \n')
        f.write('                       7 |d7           e6| 18               \n')
        f.write('       LCD  RS         8 |e0             | GND              \n')
        f.write('       LCD  EN         9 |e1   a4 a0    R| AREF             \n')
        f.write('       LCD  D4        10 |c0   a5 a1   f0| 38 A0            ENC_1           \n')
        f.write('       LCD  D5        11 |c1   a6 a2   f1| 39 A1            ENC_2\n')
        f.write('       LCD  D6        12 |c2   a7 a3   f2| 40 A2            ENC_CLK\n')
        f.write('       LCD  D6        13 |c3           f3| 41 A3            \n')
        f.write('      Bed Heat    PWM 14 |c4   V G R   f4| 42 A4            \n')
        f.write(' Extruder Heat    PWM 15 |c5   c n S   f5| 43 A5            \n')
        f.write('           Fan    PWM 16 |c6   c d T   f6| 44 A6            Bed TC\n')
        f.write('                      17 |c7   * * *   f7| 45 A7            Extruder TC * 4.7k * +5        \n')
        f.write('                         -----------------                  \n')
        f.write('\n')
        f.write('      Interior E4: 36, INT4\n')
        f.write('      Interior E5: 37, INT5\n')
        f.write('      Interior PA0-7: 28-35  -- Printrboard and Teensylu use these pins for step & direction:\n')
        f.write('             T++ PA Signal  Marlin\n')
        f.write('    \n')
        f.write('       Z STEP  32 a4  a0 28 X STEP\n')
        f.write('       Z DIR   33 a5  a1 29 X DIR\n')
        f.write('       E STEP  34 a6  a2 30 Y STEP\n')
        f.write('       E DIR   35 a7  a3 31 Y DIR\n')
        f.write('\n')
        f.write('*/\n')
        f.write('\n')
        f.write('#ifndef AT90USBxx_TEENSYPP_ASSIGNMENTS  // use Teensyduino Teensy++2.0 pin assignments instead of Marlin alphabetical.\n')
        f.write('  #error  Uncomment #define AT90USBxx_TEENSYPP_ASSIGNMENTS in fastio.h for this config\n')
        f.write('  // or build from command line with:  DEFINES=AT90USBxx_TEENSYPP_ASSIGNMENTS HARDWARE_MOTHERBOARD=84  make\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         28 //  0 Marlin\n')
        f.write('#define X_DIR_PIN          29 //  1 Marlin\n')
        f.write('#define X_ENABLE_PIN       26 \n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         30 //  2 Marlin\n')
        f.write('#define Y_DIR_PIN          31 //  3\n')
        f.write('#define Y_ENABLE_PIN       26     // Shared w/x\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         32 //  4\n')
        f.write('#define Z_DIR_PIN          33 //  5\n')
        f.write('#define Z_ENABLE_PIN       26 // Shared w/x\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN        34 //  6\n')
        f.write('#define E0_DIR_PIN         35 //  7\n')
        f.write('#define E0_ENABLE_PIN      26 // Shared w/x\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       15 //  21  // Extruder\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define HEATER_BED_PIN     14 // 20  // Bed\n')
        f.write('#define FAN_PIN            16 // 22  // Fan\n')
        f.write('\n')
        f.write('#define X_STOP_PIN          2\n')
        f.write('#define Y_STOP_PIN          3\n')
        f.write('#define Z_STOP_PIN          4\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN          7 // Extruder / Analog pin numbering\n')
        f.write('#define TEMP_BED_PIN        6 // Bed / Analog pin numbering\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDCARDDETECT       -1   \n')
        f.write('#define SDSS               20 // 8\n')
        f.write('#define LED_PIN             6\n')
        f.write('#define PS_ON_PIN          27\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define ALARM_PIN          -1\n')
        f.write('\n')
        f.write('#ifndef SDSUPPORT\n')
        f.write('// these pins are defined in the SD library if building with SD support\n')
        f.write('  #define SCK_PIN         21 // 9\n')
        f.write('  #define MISO_PIN        23 // 11\n')
        f.write('  #define MOSI_PIN        22 // 10\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef ULTIPANEL\n')
        f.write('#define LCD_PINS_RS         8\n')
        f.write('#define LCD_PINS_ENABLE     9\n')
        f.write('#define LCD_PINS_D4        10\n')
        f.write('#define LCD_PINS_D5        11\n')
        f.write('#define LCD_PINS_D6        12\n')
        f.write('#define LCD_PINS_D7        13\n')
        f.write('#define BTN_EN1            38\n')
        f.write('#define BTN_EN2            39\n')
        f.write('#define BTN_ENC            40\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#endif // TEENSY2\n')
        f.write('\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Gen3+ pin assignment\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(GEN3_PLUS)\n')
        f.write('#define MOTHERBOARD BOARD_SANGUINOLOLU_11   /*TODO: Figure out, Why is this done?*/\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('#ifndef __AVR_ATmega644P__\n')
        f.write('#ifndef __AVR_ATmega1284P__\n')
        f.write('#error Oops!  Make sure you have \'Sanguino\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         15\n')
        f.write('#define X_DIR_PIN          18\n')
        f.write('#define X_STOP_PIN         20\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         23\n')
        f.write('#define Y_DIR_PIN          22\n')
        f.write('#define Y_STOP_PIN         25\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         27\n')
        f.write('#define Z_DIR_PIN          28\n')
        f.write('#define Z_STOP_PIN         30\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN        17\n')
        f.write('#define E0_DIR_PIN         21\n')
        f.write('\n')
        f.write('#define LED_PIN            -1\n')
        f.write('\n')
        f.write('#define FAN_PIN            -1\n')
        f.write('\n')
        f.write('#define PS_ON_PIN         14\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       12 // (extruder)\n')
        f.write('\n')
        f.write('#define HEATER_BED_PIN     16 // (bed)\n')
        f.write('#define X_ENABLE_PIN       19\n')
        f.write('#define Y_ENABLE_PIN       24\n')
        f.write('#define Z_ENABLE_PIN       29\n')
        f.write('#define E0_ENABLE_PIN      13\n')
        f.write('\n')
        f.write('#define TEMP_0_PIN          0   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!! (pin 33 extruder)\n')
        f.write('#define TEMP_1_PIN         -1   \n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('#define TEMP_BED_PIN        5   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!! (pin 34 bed)  \n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               4\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('\n')
        f.write('#endif // GEN3_PLUS\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Gen3  Monolithic Electronics\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(GEN3_MONOLITHIC)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega644P__\n')
        f.write('    #error Oops!  Make sure you have \'Sanguino\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define DEBUG_PIN 0\n')
        f.write('\n')
        f.write('// x axis\n')
        f.write('#define X_STEP_PIN 15\n')
        f.write('#define X_DIR_PIN 18\n')
        f.write('#define X_MIN_PIN 20\n')
        f.write('//Alex Checar #define X_STOP_PIN         20\n')
        f.write('#define X_ENABLE_PIN 24 //actually uses Y_enable_pin\n')
        f.write('#define X_MAX_PIN -1\n')
        f.write('\n')
        f.write('// y axes\n')
        f.write('#define Y_STEP_PIN 23\n')
        f.write('#define Y_DIR_PIN 22\n')
        f.write('#define Y_MIN_PIN 25\n')
        f.write('//Alex Checar #define Y_STOP_PIN         25\n')
        f.write('#define Y_ENABLE_PIN 24 //shared with X_enable_pin\n')
        f.write('#define Y_MAX_PIN -1\n')
        f.write('\n')
        f.write('// z axes\n')
        f.write('#define Z_STEP_PIN 27\n')
        f.write('#define Z_DIR_PIN 28\n')
        f.write('#define Z_MIN_PIN 30\n')
        f.write('//Alex Checar #define Z_STOP_PIN         30\n')
        f.write('#define Z_ENABLE_PIN 29\n')
        f.write('#define Z_MAX_PIN -1\n')
        f.write('\n')
        f.write('//extruder pins\n')
        f.write('#define E0_STEP_PIN         12\n')
        f.write('#define E0_DIR_PIN          17\n')
        f.write('#define E0_ENABLE_PIN       3\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN 16\n')
        f.write('#define TEMP_0_PIN 0\n')
        f.write('\n')
        f.write('#define FAN_PIN -1\n')
        f.write('\n')
        f.write('//bed pins\n')
        f.write('#define HEATER_BED_PIN -1\n')
        f.write('#define TEMP_BED_PIN -1\n')
        f.write('\n')
        f.write('\n')
        f.write('#define SDSS     -1\n')
        f.write('#define SDPOWER          -1\n')
        f.write('#define LED_PIN          -1\n')
        f.write('\n')
        f.write('//pin for controlling the PSU.\n')
        f.write('#define PS_ON_PIN       14  //Alex, Do this work on the card?\n')
        f.write('\n')
        f.write('//Alex extras from Gen3+\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('#define TEMP_1_PIN         -1\n')
        f.write('#define TEMP_2_PIN         -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('\n')
        f.write('#endif // GEN3_MONOLITHIC\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Open Motion controller with enable based extruders\n')
        f.write('*\n')
        f.write('*                        ATMega644\n')
        f.write('*\n')
        f.write('*                        +---\/---+\n')
        f.write('*            (D 0) PB0  1|        |40  PA0 (AI 0 / D31)\n')
        f.write('*            (D 1) PB1  2|        |39  PA1 (AI 1 / D30)\n')
        f.write('*       INT2 (D 2) PB2  3|        |38  PA2 (AI 2 / D29)\n')
        f.write('*        PWM (D 3) PB3  4|        |37  PA3 (AI 3 / D28)\n')
        f.write('*        PWM (D 4) PB4  5|        |36  PA4 (AI 4 / D27)\n')
        f.write('*       MOSI (D 5) PB5  6|        |35  PA5 (AI 5 / D26)\n')
        f.write('*       MISO (D 6) PB6  7|        |34  PA6 (AI 6 / D25)\n')
        f.write('*        SCK (D 7) PB7  8|        |33  PA7 (AI 7 / D24)\n')
        f.write('*                  RST  9|        |32  AREF\n')
        f.write('*                  VCC 10|        |31  GND\n')
        f.write('*                  GND 11|        |30  AVCC\n')
        f.write('*                XTAL2 12|        |29  PC7 (D 23)\n')
        f.write('*                XTAL1 13|        |28  PC6 (D 22)\n')
        f.write('*       RX0 (D 8)  PD0 14|        |27  PC5 (D 21) TDI\n')
        f.write('*       TX0 (D 9)  PD1 15|        |26  PC4 (D 20) TDO\n')
        f.write('*  INT0 RX1 (D 10) PD2 16|        |25  PC3 (D 19) TMS\n')
        f.write('*  INT1 TX1 (D 11) PD3 17|        |24  PC2 (D 18) TCK\n')
        f.write('*       PWM (D 12) PD4 18|        |23  PC1 (D 17) SDA\n')
        f.write('*       PWM (D 13) PD5 19|        |22  PC0 (D 16) SCL\n')
        f.write('*       PWM (D 14) PD6 20|        |21  PD7 (D 15) PWM\n')
        f.write('*                        +--------+\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(OMCA_A) //Alpha OMCA board\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#ifndef __AVR_ATmega644__\n')
        f.write('#error Oops!  Make sure you have \'SanguinoA\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         21\n')
        f.write('#define X_DIR_PIN          20\n')
        f.write('#define X_ENABLE_PIN       24\n')
        f.write('#define X_STOP_PIN         0\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         23\n')
        f.write('#define Y_DIR_PIN          22\n')
        f.write('#define Y_ENABLE_PIN       24\n')
        f.write('#define Y_STOP_PIN         1\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         26\n')
        f.write('#define Z_DIR_PIN          25\n')
        f.write('#define Z_ENABLE_PIN       24\n')
        f.write('#define Z_STOP_PIN         2\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         28\n')
        f.write('#define E0_DIR_PIN          27\n')
        f.write('#define E0_ENABLE_PIN       24\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         -1 // 19\n')
        f.write('#define E1_DIR_PIN          -1 // 18\n')
        f.write('#define E1_ENABLE_PIN       24\n')
        f.write('\n')
        f.write('#define E2_STEP_PIN         -1 // 17\n')
        f.write('#define E2_DIR_PIN          -1 // 16\n')
        f.write('#define E2_ENABLE_PIN       24\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               11\n')
        f.write('#define SDCARDDETECT       -1 // 10 optional also used as mode pin\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define FAN_PIN            3\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       4\n')
        f.write('#define HEATER_1_PIN       -1 // 12\n')
        f.write('#define HEATER_2_PIN       -1 // 13\n')
        f.write('#define TEMP_0_PIN          0 //D27   // MUST USE ANALOG INPUT NUMBERING NOT DIGITAL OUTPUT NUMBERING!!!!!!!!!\n')
        f.write('#define TEMP_1_PIN         -1 // 1\n')
        f.write('#define TEMP_2_PIN         -1 // 2\n')
        f.write('#define HEATER_BED_PIN     -1 // 14/15\n')
        f.write('#define TEMP_BED_PIN       -1 // 1,2 or I2C\n')
        f.write('/*  Unused (1) (2) (3) 4 5 6 7 8 9 10 11 12 13 (14) (15) (16) 17 (18) (19) (20) (21) (22) (23) 24 (25) (26) (27) 28 (29) (30) (31)  */\n')
        f.write('\n')
        f.write('#endif // OMCA_A\n')
        f.write('\n')
        f.write('#if MB(OMCA)  // Final OMCA board -- REF http://sanguino.cc/hardware\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('#if !defined(__AVR_ATmega644P__) && !defined(__AVR_ATmega644__)\n')
        f.write('#error Oops!  Make sure you have \'Sanguino\' selected from the \'Tools -> Boards\' menu. (Final OMCA board)\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         26\n')
        f.write('#define X_DIR_PIN          25\n')
        f.write('#define X_ENABLE_PIN       10\n')
        f.write('#define X_STOP_PIN         0\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         28\n')
        f.write('#define Y_DIR_PIN          27\n')
        f.write('#define Y_ENABLE_PIN       10\n')
        f.write('#define Y_STOP_PIN         1\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         23\n')
        f.write('#define Z_DIR_PIN          22\n')
        f.write('#define Z_ENABLE_PIN       10\n')
        f.write('#define Z_STOP_PIN         2\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         24\n')
        f.write('#define E0_DIR_PIN          21\n')
        f.write('#define E0_ENABLE_PIN       10\n')
        f.write('\n')
        f.write('/* future proofing */\n')
        f.write('#define __FS  20\n')
        f.write('#define __FD  19\n')
        f.write('#define __GS  18\n')
        f.write('#define __GD  13\n')
        f.write('\n')
        f.write('#define UNUSED_PWM           14 /* PWM on LEFT connector */\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         -1 // 21\n')
        f.write('#define E1_DIR_PIN          -1 // 20\n')
        f.write('#define E1_ENABLE_PIN       -1 // 19\n')
        f.write('\n')
        f.write('#define E2_STEP_PIN         -1 // 21\n')
        f.write('#define E2_DIR_PIN          -1 // 20\n')
        f.write('#define E2_ENABLE_PIN       -1 // 18\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               11\n')
        f.write('#define SDCARDDETECT       -1 // 10 optional also used as mode pin\n')
        f.write('#define LED_PIN            -1\n')
        f.write('#define FAN_PIN            14 /* PWM on MIDDLE connector */\n')
        f.write('#define PS_ON_PIN          -1\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN        3 /*DONE PWM on RIGHT connector */\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define HEATER_1_PIN       -1\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('#define TEMP_0_PIN          0 // ANALOG INPUT NUMBERING\n')
        f.write('#define TEMP_1_PIN          1 // ANALOG\n')
        f.write('#define TEMP_2_PIN         -1 // 2\n')
        f.write('#define HEATER_BED_PIN      4\n')
        f.write('#define TEMP_BED_PIN        2 // 1,2 or I2C\n')
        f.write('\n')
        f.write('#define I2C_SCL       16\n')
        f.write('#define I2C_SDA       17\n')
        f.write('\n')
        f.write('#endif // OMCA\n')
        f.write('\n')
        f.write('/*****************************************************************\n')
        f.write('* Rambo Pin Assignments\n')
        f.write('******************************************************************/\n')
        f.write('#if MB(RAMBO)\n')
        f.write('#define KNOWN_BOARD\n')
        f.write('#ifndef __AVR_ATmega2560__\n')
        f.write('#error Oops!  Make sure you have \'Arduino Mega 2560\' selected from the \'Tools -> Boards\' menu.\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define LARGE_FLASH true\n')
        f.write('\n')
        f.write('#define X_STEP_PIN 37\n')
        f.write('#define X_DIR_PIN 48\n')
        f.write('#define X_MIN_PIN 12\n')
        f.write('#define X_MAX_PIN 24\n')
        f.write('#define X_ENABLE_PIN 29\n')
        f.write('#define X_MS1_PIN 40\n')
        f.write('#define X_MS2_PIN 41\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN 36\n')
        f.write('#define Y_DIR_PIN 49\n')
        f.write('#define Y_MIN_PIN 11\n')
        f.write('#define Y_MAX_PIN 23\n')
        f.write('#define Y_ENABLE_PIN 28\n')
        f.write('#define Y_MS1_PIN 69\n')
        f.write('#define Y_MS2_PIN 39\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN 35\n')
        f.write('#define Z_DIR_PIN 47\n')
        f.write('#define Z_MIN_PIN 10\n')
        f.write('#define Z_MAX_PIN 30\n')
        f.write('#define Z_ENABLE_PIN 27\n')
        f.write('#define Z_MS1_PIN 68\n')
        f.write('#define Z_MS2_PIN 67\n')
        f.write('\n')
        f.write('#define HEATER_BED_PIN 3\n')
        f.write('#define TEMP_BED_PIN 2\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN  9\n')
        f.write('#define TEMP_0_PIN 0\n')
        f.write('\n')
        f.write('#define HEATER_1_PIN 7\n')
        f.write('#define TEMP_1_PIN 1\n')
        f.write('\n')
        f.write('#ifdef BARICUDA\n')
        f.write('#define HEATER_2_PIN 6\n')
        f.write('#else\n')
        f.write('#define HEATER_2_PIN -1\n')
        f.write('#endif\n')
        f.write('#define TEMP_2_PIN -1\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN         34\n')
        f.write('#define E0_DIR_PIN          43\n')
        f.write('#define E0_ENABLE_PIN       26\n')
        f.write('#define E0_MS1_PIN 65\n')
        f.write('#define E0_MS2_PIN 66\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN         33\n')
        f.write('#define E1_DIR_PIN          42\n')
        f.write('#define E1_ENABLE_PIN       25\n')
        f.write('#define E1_MS1_PIN 63\n')
        f.write('#define E1_MS2_PIN 64\n')
        f.write('\n')
        f.write('#define DIGIPOTSS_PIN 38\n')
        f.write('#define DIGIPOT_CHANNELS {4,5,3,0,1} // X Y Z E0 E1 digipot channels to stepper driver mapping\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               53\n')
        f.write('#define LED_PIN            13\n')
        f.write('#define FAN_PIN            8\n')
        f.write('#define PS_ON_PIN          4\n')
        f.write('#define KILL_PIN           -1 //80 with Smart Controller LCD\n')
        f.write('#define SUICIDE_PIN        -1  //PIN that has to be turned on right after start, to keep power flowing.\n')
        f.write('\n')
        f.write('#ifdef ULTRA_LCD\n')
        f.write('  #define KILL_PIN 80\n')
        f.write('  #ifdef NEWPANEL\n')
        f.write('   //arduino pin which triggers an piezzo beeper\n')
        f.write('    #define BEEPER 79      // Beeper on AUX-4\n')
        f.write('    #define LCD_PINS_RS 70\n')
        f.write('    #define LCD_PINS_ENABLE 71\n')
        f.write('    #define LCD_PINS_D4 72\n')
        f.write('    #define LCD_PINS_D5 73\n')
        f.write('    #define LCD_PINS_D6 74\n')
        f.write('    #define LCD_PINS_D7 75\n')
        f.write('\n')
        f.write('    //buttons are directly attached using AUX-2\n')
        f.write('    #define BTN_EN1 76\n')
        f.write('    #define BTN_EN2 77\n')
        f.write('    #define BTN_ENC 78  //the click\n')
        f.write('\n')
        f.write('    #define BLEN_C 2\n')
        f.write('    #define BLEN_B 1\n')
        f.write('    #define BLEN_A 0\n')
        f.write('\n')
        f.write('    #define SDCARDDETECT 81    // Ramps does not use this port\n')
        f.write('\n')
        f.write('    //encoder rotation values\n')
        f.write('    #define encrot0 0\n')
        f.write('    #define encrot1 2\n')
        f.write('    #define encrot2 3\n')
        f.write('    #define encrot3 1\n')
        f.write('  #else //old style panel with shift register\n')
        f.write('    //arduino pin witch triggers an piezzo beeper\n')
        f.write('    #define BEEPER 33    No Beeper added\n')
        f.write('    //buttons are attached to a shift register\n')
        f.write('    // Not wired this yet\n')
        f.write('    // #define SHIFT_CLK 38\n')
        f.write('    // #define SHIFT_LD 42\n')
        f.write('    // #define SHIFT_OUT 40\n')
        f.write('    // #define SHIFT_EN 17\n')
        f.write('\n')
        f.write('    #define LCD_PINS_RS 75\n')
        f.write('    #define LCD_PINS_ENABLE 17\n')
        f.write('    #define LCD_PINS_D4 23\n')
        f.write('    #define LCD_PINS_D5 25\n')
        f.write('    #define LCD_PINS_D6 27\n')
        f.write('    #define LCD_PINS_D7 29\n')
        f.write('\n')
        f.write('    //encoder rotation values\n')
        f.write('    #define encrot0 0\n')
        f.write('    #define encrot1 2\n')
        f.write('    #define encrot2 3\n')
        f.write('    #define encrot3 1\n')
        f.write('\n')
        f.write('    //bits in the shift register that carry the buttons for:\n')
        f.write('    // left up center down right red\n')
        f.write('    #define BL_LE 7\n')
        f.write('    #define BL_UP 6\n')
        f.write('    #define BL_MI 5\n')
        f.write('    #define BL_DW 4\n')
        f.write('    #define BL_RI 3\n')
        f.write('    #define BL_ST 2\n')
        f.write('    #define BLEN_B 1\n')
        f.write('    #define BLEN_A 0\n')
        f.write('  #endif\n')
        f.write('#endif //ULTRA_LCD\n')
        f.write('\n')
        f.write('#ifdef FILAMENT_SENSOR\n')
        f.write('  //Filip added pin for Filament sensor analog input \n')
        f.write('  #define FILWIDTH_PIN        3\n')
        f.write('#endif //FILAMENT_SENSOR\n')
        f.write('\n')
        f.write('#endif // RAMBO\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* MegaTronics\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(MEGATRONICS)\n')
        f.write('#define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops!  Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write('\n')
        f.write('#define LARGE_FLASH        true\n')
        f.write('\n')
        f.write('#define X_STEP_PIN         26\n')
        f.write('#define X_DIR_PIN          28\n')
        f.write('#define X_ENABLE_PIN       24\n')
        f.write('#define X_MIN_PIN          41\n')
        f.write('#define X_MAX_PIN          37\n')
        f.write('\n')
        f.write('#define Y_STEP_PIN         60 // A6\n')
        f.write('#define Y_DIR_PIN          61 // A7\n')
        f.write('#define Y_ENABLE_PIN       22\n')
        f.write('#define Y_MIN_PIN          14\n')
        f.write('#define Y_MAX_PIN          15\n')
        f.write('\n')
        f.write('#define Z_STEP_PIN         54 // A0\n')
        f.write('#define Z_DIR_PIN          55 // A1\n')
        f.write('#define Z_ENABLE_PIN       56 // A2\n')
        f.write('#define Z_MIN_PIN          18\n')
        f.write('#define Z_MAX_PIN          19\n')
        f.write('\n')
        f.write('#define E0_STEP_PIN        31\n')
        f.write('#define E0_DIR_PIN         32\n')
        f.write('#define E0_ENABLE_PIN      38\n')
        f.write('\n')
        f.write('#define E1_STEP_PIN        34\n')
        f.write('#define E1_DIR_PIN         36\n')
        f.write('#define E1_ENABLE_PIN      30\n')
        f.write('\n')
        f.write('#define SDPOWER            -1\n')
        f.write('#define SDSS               53\n')
        f.write('#define LED_PIN            13\n')
        f.write('\n')
        f.write('\n')
        f.write('#define FAN_PIN            7 // IO pin. Buffer needed\n')
        f.write('#define PS_ON_PIN          12\n')
        f.write('#define KILL_PIN           -1\n')
        f.write('\n')
        f.write('#define HEATER_0_PIN       9    // EXTRUDER 1\n')
        f.write('#define HEATER_1_PIN       8    // EXTRUDER 2 (FAN On Sprinter)\n')
        f.write('#define HEATER_2_PIN       -1\n')
        f.write('\n')
        f.write('#if TEMP_SENSOR_0 == -1\n')
        f.write('#define TEMP_0_PIN         8   // ANALOG NUMBERING\n')
        f.write('#else\n')
        f.write('#define TEMP_0_PIN         13   // ANALOG NUMBERING\n')
        f.write('\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define TEMP_1_PIN         15   // ANALOG NUMBERING\n')
        f.write('#define TEMP_2_PIN         -1   // ANALOG NUMBERING\n')
        f.write('#define HEATER_BED_PIN     10   // BED\n')
        f.write('#define TEMP_BED_PIN       14   // ANALOG NUMBERING\n')
        f.write('\n')
        f.write('#define BEEPER 33     // Beeper on AUX-4\n')
        f.write('\n')
        f.write('\n')
        f.write('#ifdef ULTRA_LCD\n')
        f.write('\n')
        f.write('  #ifdef NEWPANEL\n')
        f.write('  //arduino pin which triggers an piezzo beeper\n')
        f.write('\n')
        f.write('    #define LCD_PINS_RS 16\n')
        f.write('    #define LCD_PINS_ENABLE 17\n')
        f.write('    #define LCD_PINS_D4 23\n')
        f.write('    #define LCD_PINS_D5 25\n')
        f.write('    #define LCD_PINS_D6 27\n')
        f.write('    #define LCD_PINS_D7 29\n')
        f.write('\n')
        f.write('    //buttons are directly attached using AUX-2\n')
        f.write('    #define BTN_EN1 59\n')
        f.write('    #define BTN_EN2 64\n')
        f.write('    #define BTN_ENC 43  //the click\n')
        f.write('\n')
        f.write('    #define BLEN_C 2\n')
        f.write('    #define BLEN_B 1\n')
        f.write('    #define BLEN_A 0\n')
        f.write('\n')
        f.write('    #define SDCARDDETECT -1   // Ramps does not use this port\n')
        f.write('\n')
        f.write('      //encoder rotation values\n')
        f.write('    #define encrot0 0\n')
        f.write('    #define encrot1 2\n')
        f.write('    #define encrot2 3\n')
        f.write('    #define encrot3 1\n')
        f.write('#endif\n')
        f.write('#endif //ULTRA_LCD\n')
        f.write('\n')
        f.write('#endif // MEGATRONICS\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* MegaTronics v2.0\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(MEGATRONICS_2)\n')
        f.write(' #define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops! Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write(' #define LARGE_FLASH        true\n')
        f.write('\n')
        f.write(' #define X_STEP_PIN 26\n')
        f.write(' #define X_DIR_PIN 27\n')
        f.write(' #define X_ENABLE_PIN 25\n')
        f.write(' #define X_MIN_PIN 37\n')
        f.write(' #define X_MAX_PIN 40 //2 //Max endstops default to disabled "-1", set to commented value to enable.\n')
        f.write('\n')
        f.write(' #define Y_STEP_PIN 4 // A6\n')
        f.write(' #define Y_DIR_PIN 54 // A0\n')
        f.write(' #define Y_ENABLE_PIN 5\n')
        f.write(' #define Y_MIN_PIN 41\n')
        f.write(' #define Y_MAX_PIN 38 //15\n')
        f.write('\n')
        f.write(' #define Z_STEP_PIN 56 // A2\n')
        f.write(' #define Z_DIR_PIN 60 // A6\n')
        f.write(' #define Z_ENABLE_PIN 55 // A1\n')
        f.write(' #define Z_MIN_PIN 18\n')
        f.write(' #define Z_MAX_PIN 19\n')
        f.write('\n')
        f.write(' #define E0_STEP_PIN 35\n')
        f.write(' #define E0_DIR_PIN 36\n')
        f.write(' #define E0_ENABLE_PIN 34\n')
        f.write('\n')
        f.write(' #define E1_STEP_PIN 29\n')
        f.write(' #define E1_DIR_PIN 39\n')
        f.write(' #define E1_ENABLE_PIN 28\n')
        f.write('\n')
        f.write(' #define E2_STEP_PIN 23\n')
        f.write(' #define E2_DIR_PIN 24\n')
        f.write(' #define E2_ENABLE_PIN 22\n')
        f.write('\n')
        f.write(' #define SDPOWER -1\n')
        f.write(' #define SDSS 53\n')
        f.write(' #define LED_PIN 13\n')
        f.write('\n')
        f.write(' #define FAN_PIN 7\n')
        f.write(' #define FAN2_PIN 6\n')
        f.write(' #define PS_ON_PIN 12\n')
        f.write(' #define KILL_PIN -1\n')
        f.write('\n')
        f.write(' #define HEATER_0_PIN 9 // EXTRUDER 1\n')
        f.write(' #define HEATER_1_PIN 8 // EXTRUDER 2\n')
        f.write(' #define HEATER_2_PIN -1\n')
        f.write('\n')
        f.write(' #if TEMP_SENSOR_0 == -1\n')
        f.write('   #define TEMP_0_PIN 4 // ANALOG NUMBERING\n')
        f.write(' #else\n')
        f.write('   #define TEMP_0_PIN 13 // ANALOG NUMBERING\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write('\n')
        f.write(' #if TEMP_SENSOR_1 == -1\n')
        f.write('   #define TEMP_1_PIN 8 // ANALOG NUMBERING\n')
        f.write(' #else\n')
        f.write('   #define TEMP_1_PIN 15 // ANALOG NUMBERING\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write(' #define TEMP_2_PIN -1 // ANALOG NUMBERING\n')
        f.write('\n')
        f.write(' #define HEATER_BED_PIN 10 // BED\n')
        f.write('\n')
        f.write(' #if TEMP_SENSOR_BED == -1\n')
        f.write('   #define TEMP_BED_PIN 8 // ANALOG NUMBERING\n')
        f.write(' #else\n')
        f.write('   #define TEMP_BED_PIN 14 // ANALOG NUMBERING\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write(' #define BEEPER 64\n')
        f.write('\n')
        f.write('\n')
        f.write(' #define LCD_PINS_RS 14\n')
        f.write(' #define LCD_PINS_ENABLE 15\n')
        f.write(' #define LCD_PINS_D4 30\n')
        f.write(' #define LCD_PINS_D5 31\n')
        f.write(' #define LCD_PINS_D6 32\n')
        f.write(' #define LCD_PINS_D7 33\n')
        f.write('\n')
        f.write('\n')
        f.write(' //buttons are directly attached using keypad\n')
        f.write(' #define BTN_EN1 61\n')
        f.write(' #define BTN_EN2 59\n')
        f.write(' #define BTN_ENC 43 //the click\n')
        f.write('\n')
        f.write(' #define BLEN_C 2\n')
        f.write(' #define BLEN_B 1\n')
        f.write(' #define BLEN_A 0\n')
        f.write('\n')
        f.write(' #define SDCARDDETECT -1  // Megatronics does not use this port\n')
        f.write('\n')
        f.write('   //encoder rotation values\n')
        f.write(' #define encrot0 0\n')
        f.write(' #define encrot1 2\n')
        f.write(' #define encrot2 3\n')
        f.write(' #define encrot3 1\n')
        f.write('\n')
        f.write('#endif // MEGATRONICS_2\n')
        f.write('\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Minitronics v1.0\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(MEGATRONICS_1)\n')
        f.write(' #define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write('\n')
        f.write(' #ifndef __AVR_ATmega1281__\n')
        f.write(' #error Oops! Make sure you have \'Minitronics \' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write(' #define LARGE_FLASH        true\n')
        f.write('\n')
        f.write(' #define X_STEP_PIN 48\n')
        f.write(' #define X_DIR_PIN 47\n')
        f.write(' #define X_ENABLE_PIN 49\n')
        f.write(' #define X_MIN_PIN 5\n')
        f.write(' #define X_MAX_PIN -1 //2 //Max endstops default to disabled "-1", set to commented value to enable.\n')
        f.write('\n')
        f.write(' #define Y_STEP_PIN 39 // A6\n')
        f.write(' #define Y_DIR_PIN 40 // A0\n')
        f.write(' #define Y_ENABLE_PIN 38\n')
        f.write(' #define Y_MIN_PIN 2\n')
        f.write(' #define Y_MAX_PIN -1 //15\n')
        f.write('\n')
        f.write(' #define Z_STEP_PIN 42 // A2\n')
        f.write(' #define Z_DIR_PIN 43 // A6\n')
        f.write(' #define Z_ENABLE_PIN 41 // A1\n')
        f.write(' #define Z_MIN_PIN 6\n')
        f.write(' #define Z_MAX_PIN -1\n')
        f.write('\n')
        f.write(' #define E0_STEP_PIN 45\n')
        f.write(' #define E0_DIR_PIN 44\n')
        f.write(' #define E0_ENABLE_PIN 27\n')
        f.write('\n')
        f.write(' #define E1_STEP_PIN 36\n')
        f.write(' #define E1_DIR_PIN 35\n')
        f.write(' #define E1_ENABLE_PIN 37\n')
        f.write('\n')
        f.write(' #define E2_STEP_PIN -1\n')
        f.write(' #define E2_DIR_PIN -1\n')
        f.write(' #define E2_ENABLE_PIN -1\n')
        f.write('\n')
        f.write(' #define SDPOWER -1\n')
        f.write(' #define SDSS 16\n')
        f.write(' #define LED_PIN 46\n')
        f.write('\n')
        f.write(' #define FAN_PIN 9\n')
        f.write(' #define FAN2_PIN -1\n')
        f.write(' #define PS_ON_PIN -1\n')
        f.write(' #define KILL_PIN -1\n')
        f.write('\n')
        f.write(' #define HEATER_0_PIN 7 // EXTRUDER 1\n')
        f.write(' #define HEATER_1_PIN 8 // EXTRUDER 2\n')
        f.write(' #define HEATER_2_PIN -1\n')
        f.write('\n')
        f.write('\n')
        f.write(' #define TEMP_0_PIN 7 // ANALOG NUMBERING\n')
        f.write(' #define TEMP_1_PIN 6 // ANALOG NUMBERING\n')
        f.write(' #define TEMP_2_PIN -1 // ANALOG NUMBERING\n')
        f.write('\n')
        f.write(' #define HEATER_BED_PIN 3 // BED\n')
        f.write(' #define TEMP_BED_PIN 6 // ANALOG NUMBERING\n')
        f.write('\n')
        f.write(' #define BEEPER -1\n')
        f.write('\n')
        f.write('\n')
        f.write(' #define LCD_PINS_RS -1\n')
        f.write(' #define LCD_PINS_ENABLE -1\n')
        f.write(' #define LCD_PINS_D4 -1\n')
        f.write(' #define LCD_PINS_D5 -1\n')
        f.write(' #define LCD_PINS_D6 -1\n')
        f.write(' #define LCD_PINS_D7 -1\n')
        f.write('\n')
        f.write('\n')
        f.write(' //buttons are directly attached using keypad\n')
        f.write(' #define BTN_EN1 -1\n')
        f.write(' #define BTN_EN2 -1\n')
        f.write(' #define BTN_ENC -1 //the click\n')
        f.write('\n')
        f.write(' #define BLEN_C 2\n')
        f.write(' #define BLEN_B 1\n')
        f.write(' #define BLEN_A 0\n')
        f.write('\n')
        f.write(' #define SDCARDDETECT -1  // Megatronics does not use this port\n')
        f.write('\n')
        f.write('   //encoder rotation values\n')
        f.write(' #define encrot0 0\n')
        f.write(' #define encrot1 2\n')
        f.write(' #define encrot2 3\n')
        f.write(' #define encrot3 1\n')
        f.write('\n')
        f.write('#endif // MEGATRONICS_1\n')
        f.write('\n')
        f.write('/****************************************************************************************\n')
        f.write('* Cheaptronic v1.0\n')
        f.write('*\n')
        f.write('****************************************************************************************/\n')
        f.write('#if MB(CHEAPTRONIC)\n')
        f.write(' #define KNOWN_BOARD 1\n')
        f.write('\n')
        f.write(' #ifndef __AVR_ATmega2560__\n')
        f.write(' #error Oops! Make sure you have \'Arduino Mega\' selected from the \'Tools -> Boards\' menu.\n')
        f.write(' #endif\n')
        f.write('\n')
        f.write(' #define LARGE_FLASH        true\n')
        f.write('\n')
        f.write(' //X motor stepper\n')
        f.write(' #define X_STEP_PIN 14\n')
        f.write(' #define X_DIR_PIN 15\n')
        f.write(' #define X_ENABLE_PIN 24\n')
        f.write('\n')
        f.write(' //X endstop\n')
        f.write(' #define X_MIN_PIN 3\n')
        f.write(' #define X_MAX_PIN -1\n')
        f.write('\n')
        f.write(' //Y motor stepper\n')
        f.write(' #define Y_STEP_PIN 35\n')
        f.write(' #define Y_DIR_PIN 36\n')
        f.write(' #define Y_ENABLE_PIN 31\n')
        f.write('\n')
        f.write(' //Y endstop\n')
        f.write(' #define Y_MIN_PIN 2\n')
        f.write(' #define Y_MAX_PIN -1\n')
        f.write('\n')
        f.write(' //Z motor stepper\n')
        f.write(' #define Z_STEP_PIN 40\n')
        f.write(' #define Z_DIR_PIN 41\n')
        f.write(' #define Z_ENABLE_PIN 37\n')
        f.write('\n')
        f.write(' //Z endstop\n')
        f.write(' #define Z_MIN_PIN 5\n')
        f.write(' #define Z_MAX_PIN -1\n')
        f.write('\n')
        f.write(' //Extruder 0 stepper\n')
        f.write(' #define E0_STEP_PIN 26\n')
        f.write(' #define E0_DIR_PIN 28\n')
        f.write(' #define E0_ENABLE_PIN 25\n')
        f.write('\n')
        f.write(' //Extruder 1 stepper\n')
        f.write(' #define E1_STEP_PIN 33\n')
        f.write(' #define E1_DIR_PIN 34\n')
        f.write(' #define E1_ENABLE_PIN 30\n')
        f.write('\n')
        f.write(' #define SDPOWER -1\n')
        f.write(' #define SDSS -1\n')
        f.write(' #define LED_PIN -1\n')
        f.write('\n')
        f.write(' //FAN\n')
        f.write(' #define FAN_PIN -1\n')
        f.write('\n')
        f.write(' #define PS_ON_PIN -1\n')
        f.write(' #define KILL_PIN -1\n')
        f.write('\n')
        f.write(' #define HEATER_0_PIN 19 // EXTRUDER 1\n')
        f.write(' #define HEATER_1_PIN 23 // EXTRUDER 2\n')
        f.write(' //HeatedBad\n')
        f.write(' #define HEATER_BED_PIN 22\n')
        f.write(' //Cheaptronic v1.0 hasent EXTRUDER 3\n')
        f.write(' #define HEATER_2_PIN -1\n')
        f.write('\n')
        f.write(' //Temperature sensors\n')
        f.write(' #define TEMP_0_PIN 15\n')
        f.write(' #define TEMP_1_PIN 14\n')
        f.write(' #define TEMP_2_PIN -1\n')
        f.write(' #define TEMP_BED_PIN 13\n')
        f.write('\n')
        f.write(' //Cheaptronic v1.0 dont support LCD\n')
        f.write(' #define LCD_PINS_RS -1\n')
        f.write(' #define LCD_PINS_ENABLE -1\n')
        f.write(' #define LCD_PINS_D4 -1\n')
        f.write(' #define LCD_PINS_D5 -1\n')
        f.write(' #define LCD_PINS_D6 -1\n')
        f.write(' #define LCD_PINS_D7 -1\n')
        f.write('\n')
        f.write(' //Cheaptronic v1.0 dont support keypad\n')
        f.write(' #define BTN_EN1 -1\n')
        f.write(' #define BTN_EN2 -1\n')
        f.write(' #define BTN_ENC -1\n')
        f.write('\n')
        f.write(' #define BLEN_C 2\n')
        f.write(' #define BLEN_B 1\n')
        f.write(' #define BLEN_A 0\n')
        f.write('\n')
        f.write(' //Cheaptronic v1.0 does not use this port\n')
        f.write(' #define SDCARDDETECT -1\n')
        f.write('\n')
        f.write(' //encoder rotation values\n')
        f.write(' #define encrot0 0\n')
        f.write(' #define encrot1 2\n')
        f.write(' #define encrot2 3\n')
        f.write(' #define encrot3 1\n')
        f.write('\n')
        f.write('#endif // CHEAPTRONIC\n')
        f.write('\n')
        f.write('\n')
        f.write('\n')
        f.write('#ifndef KNOWN_BOARD\n')
        f.write('#error Unknown MOTHERBOARD value in configuration.h\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('//List of pins which to ignore when asked to change by gcode, 0 and 1 are RX and TX, do not mess with those!\n')
        f.write('#define _E0_PINS E0_STEP_PIN, E0_DIR_PIN, E0_ENABLE_PIN, HEATER_0_PIN,\n')
        f.write('#if EXTRUDERS > 1\n')
        f.write('  #define _E1_PINS E1_STEP_PIN, E1_DIR_PIN, E1_ENABLE_PIN, HEATER_1_PIN,\n')
        f.write('#else\n')
        f.write('  #define _E1_PINS\n')
        f.write('#endif\n')
        f.write('#if EXTRUDERS > 2\n')
        f.write('  #define _E2_PINS E2_STEP_PIN, E2_DIR_PIN, E2_ENABLE_PIN, HEATER_2_PIN,\n')
        f.write('#else\n')
        f.write('  #define _E2_PINS\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef X_STOP_PIN\n')
        f.write('  #if X_HOME_DIR < 0\n')
        f.write('    #define X_MIN_PIN X_STOP_PIN\n')
        f.write('    #define X_MAX_PIN -1\n')
        f.write('  #else\n')
        f.write('    #define X_MIN_PIN -1\n')
        f.write('    #define X_MAX_PIN X_STOP_PIN\n')
        f.write('  #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef Y_STOP_PIN\n')
        f.write('  #if Y_HOME_DIR < 0\n')
        f.write('    #define Y_MIN_PIN Y_STOP_PIN\n')
        f.write('    #define Y_MAX_PIN -1\n')
        f.write('  #else\n')
        f.write('    #define Y_MIN_PIN -1\n')
        f.write('    #define Y_MAX_PIN Y_STOP_PIN\n')
        f.write('  #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef Z_STOP_PIN\n')
        f.write('  #if Z_HOME_DIR < 0\n')
        f.write('    #define Z_MIN_PIN Z_STOP_PIN\n')
        f.write('    #define Z_MAX_PIN -1\n')
        f.write('  #else\n')
        f.write('    #define Z_MIN_PIN -1\n')
        f.write('    #define Z_MAX_PIN Z_STOP_PIN\n')
        f.write('  #endif\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef DISABLE_MAX_ENDSTOPS\n')
        f.write('#define X_MAX_PIN          -1\n')
        f.write('#define Y_MAX_PIN          -1\n')
        f.write('#define Z_MAX_PIN          -1\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#ifdef DISABLE_MIN_ENDSTOPS\n')
        f.write('#define X_MIN_PIN          -1\n')
        f.write('#define Y_MIN_PIN          -1\n')
        f.write('#define Z_MIN_PIN          -1\n')
        f.write('#endif\n')
        f.write('\n')
        f.write('#define SENSITIVE_PINS {0, 1, X_STEP_PIN, X_DIR_PIN, X_ENABLE_PIN, X_MIN_PIN, X_MAX_PIN, Y_STEP_PIN, Y_DIR_PIN, Y_ENABLE_PIN, Y_MIN_PIN, Y_MAX_PIN, Z_STEP_PIN, Z_DIR_PIN, Z_ENABLE_PIN, Z_MIN_PIN, Z_MAX_PIN, PS_ON_PIN, \\n')
        f.write('                        HEATER_BED_PIN, FAN_PIN,                  \\n')
        f.write('                        _E0_PINS _E1_PINS _E2_PINS             \\n')
        f.write('                        analogInputToDigitalPin(TEMP_0_PIN), analogInputToDigitalPin(TEMP_1_PIN), analogInputToDigitalPin(TEMP_2_PIN), analogInputToDigitalPin(TEMP_BED_PIN) }\n')
        f.write('\n')
        f.write('#endif //__PINS_H\n')
        f.close()


marlin()